export = Uu5Elements;
declare namespace Uu5Elements {
    namespace UuGds {
    }
    interface Accordion$Props {
        itemList?: any[];
        colorScheme?: any;
        significance?: any;
        borderRadius?: any;
    }
    function Accordion(props: Accordion$Props): any;
    interface ActionGroup$collapsedMenuProps {
    }
    interface ActionGroup$Props {
        itemList?: any[];
        collapsedMenuProps?: ActionGroup$collapsedMenuProps;
        size?: any;
        alignment?: "left" | "right";
        onMeasure?(...args: any): any;
    }
    function ActionGroup(props: ActionGroup$Props): any;
    interface Alert$Props {
        durationMs?: number;
    }
    function Alert(props: Alert$Props): any;
    interface AlertBus$Props {
        element?: any;
    }
    function AlertBus(props: AlertBus$Props): any;
    interface Badge$Props {
        icon?: any;
        size?: any;
        borderRadius?: any;
        borderContrast?: boolean;
        colorScheme?: any;
        significance?: "common" | "highlighted";
        onClick?(...args: any): any;
    }
    function Badge(props: Badge$Props): any;
    interface Block$Props {
        headerType?: "title" | "heading";
    }
    function Block(props: Block$Props): any;
    namespace Block {
        interface View$actionCollapsedMenuProps {
        }
        interface View$lsi {
        }
        interface View$Props {
            card?: "none" | "full" | "content";
            actionList?: any[];
            actionCollapsedMenuProps?: View$actionCollapsedMenuProps;
            colorScheme?: string;
            significance?: string;
            borderRadius?: string;
            header?: any;
            headerSeparator?: boolean;
            headerType?: "title" | "heading";
            level?: 1 | 2 | 3 | 4 | 5;
            footer?: any | ((...args: any)=>any);
            footerSeparator?: boolean;
            contentMaxHeight?: any;
            initialCollapsed?: boolean;
            initialDisplayInfo?: boolean;
            info?: any | any[];
            collapsible?: boolean;
            leftBorderCssColor?: string;
            lsi?: View$lsi;
        }
        function View(props: View$Props): any;
    }
    interface Box$Props {
        shape?: "ground" | "interactiveElement" | "interactiveItem" | "background";
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        aspectRatio?: any;
        size?: "xs" | "s" | "m" | "l";
        borderRadius?: any;
        width?: any;
        height?: any;
        onClick?(...args: any): any;
    }
    function Box(props: Box$Props): any;
    interface Breadcrumbs$Props {
        itemList?: any;
    }
    function Breadcrumbs(props: Breadcrumbs$Props): any;
    interface Button$Props {
        onClick?(...args: any): any;
        icon?: any;
        iconNotification?: boolean;
        iconRight?: any;
        type?: "button" | "submit" | "reset";
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        effect?: "ground" | "upper";
        size?: any;
        borderRadius?: any;
        width?: any;
        pressed?: boolean;
    }
    function Button(props: Button$Props): any;
    interface ButtonGroup$Props {
        itemList?: any[];
        size?: any;
        colorScheme?: any;
        significance?: any;
        borderRadius?: any;
        width?: any;
        _displaySeparators?: boolean;
    }
    function ButtonGroup(props: ButtonGroup$Props): any;
    interface Calendar$Props {
        value?: any[] | string;
        onSelect?(...args: any): any;
        min?: string;
        max?: string;
        step?: number;
        displayWeekNumbers?: boolean;
        selectionMode?: "single" | "range" | "week" | "weekRange";
        direction?: "horizontal" | "vertical";
        displayNavigation?: boolean;
        displayPresets?: boolean;
        height?: any;
        dateMap?: any;
        weekStartDay?: number;
        timeZone?: string;
    }
    function Calendar(props: Calendar$Props): any;
    interface Carousel$Props {
        colorScheme?: any;
        stepper?: "none" | "outer" | "inner";
        buttons?: "none" | "outer" | "inner";
        virtualization?: boolean;
        stopIntervalOnHover?: boolean;
    }
    function Carousel(props: Carousel$Props): any;
    interface CollapsibleBox$Props {
        collapsed?: boolean;
    }
    function CollapsibleBox(props: CollapsibleBox$Props): any;
    interface ContextCenterButton$Props {
        itemList?: any;
        displayType?: "button" | "button-compact" | "menu-item";
    }
    function ContextCenterButton(props: ContextCenterButton$Props): any;
    interface DateTime$Props {
        value?: string | any;
        dateFormat?: "none" | "short" | "medium" | "long";
        timeFormat?: "none" | "short" | "medium" | "long";
        hourFormat?: 11 | 12 | 24;
        format?: string;
        timeZone?: string;
    }
    function DateTime(props: DateTime$Props): any;
    function Dialog(props: any): any;
    interface Drawer$padding {
    }
    interface Drawer$Props {
        type?: any;
        position?: "left" | "right";
        open?: boolean;
        onChange?(...args: any): any;
        onClose?(...args: any): any;
        height?: number | string;
        offsetTop?: number;
        width?: number;
        widthCollapsed?: number;
        content?: any;
        padding?: Drawer$padding | number;
        spacing?: "tight" | "normal" | "loose";
        collapsible?: boolean;
    }
    function Drawer(props: Drawer$Props): any;
    interface Dropdown$Props {
        label?: any;
        itemList?: any;
        openPosition?: any;
        iconOpen?: boolean | any;
        iconClosed?: boolean | any;
        compactSubmenu?: any;
        closeOnScroll?: boolean;
        onClick?(...args: any): any;
        onLabelClick?(...args: any): any;
    }
    function Dropdown(props: Dropdown$Props): any;
    interface Flag$Props {
        src?: any;
        code?: any;
        type?: "rectangle" | "square" | "circle";
        bordered?: boolean;
        height?: any;
        borderRadius?: any;
    }
    function Flag(props: Flag$Props): any;
    namespace Flag {
        const BASE_URI: "https://cdn.plus4u.net/uu-gds-svgg01/1.0.0/assets/flags/";
    }
    interface Grid$Props {
        display?: "block" | "inline";
        templateAreas?: any;
        templateRows?: any;
        autoRows?: any;
        templateColumns?: any;
        autoColumns?: any;
        rowGap?: any;
        columnGap?: any;
        justifyItems?: any;
        alignItems?: any;
        justifyContent?: any;
        alignContent?: any;
        flow?: any;
    }
    function Grid(props: Grid$Props): any;
    namespace Grid {
        interface Item$Props {
            gridArea?: string;
            colSpan?: any;
            rowSpan?: any;
            justifySelf?: any;
            alignSelf?: any;
        }
        function Item(props: Item$Props): any;
    }
    interface GridTemplate$contentMap {
    }
    interface GridTemplate$contentStyleMap {
    }
    interface GridTemplate$Props {
        templateAreas: any;
        contentMap: GridTemplate$contentMap;
        contentStyleMap?: GridTemplate$contentStyleMap;
    }
    function GridTemplate(props: GridTemplate$Props): any;
    interface HighlightedBox$Props {
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        borderRadius?: any;
        icon?: any;
        onClose?(...args: any): any;
        controlList?: any[];
        controlPosition?: "right" | "bottom";
        overlay?: boolean;
    }
    function HighlightedBox(props: HighlightedBox$Props): any;
    interface Icon$Props {
        icon?: any;
        tooltip?: string;
        margin?: any;
        onClick?(...args: any): any;
        colorScheme?: any;
        significance?: "common" | "subdued";
    }
    function Icon(props: Icon$Props): any;
    interface InfoGroup$Props {
        itemList?: any[];
        size?: any;
        direction?: "horizontal" | "vertical";
        autoResize?: boolean;
        itemDirection?: "horizontal" | "vertical" | "vertical-reverse";
    }
    function InfoGroup(props: InfoGroup$Props): any;
    interface InfoItem$Props {
        icon?: any;
        iconText?: any;
        imageSrc?: string;
        title?: any;
        subtitle?: any;
        significance?: "common" | "highlighted" | "subdued";
        size?: any;
        colorScheme?: any;
        direction?: "horizontal" | "vertical" | "vertical-reverse";
        onClick?(...args: any): any;
    }
    function InfoItem(props: InfoItem$Props): any;
    interface Input$Props {
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        effect?: "ground" | "upper";
        size?: any;
        borderRadius?: any;
        width?: any;
        name?: string;
        type?: any | "text" | "password" | "number" | "email" | "tel" | "date" | "time" | "datetime-local" | "week" | "month" | "search" | "url" | "checkbox" | "radio" | "textarea" | "color" | "file" | "range";
        value?: string | boolean;
        placeholder?: string;
        onChange?(...args: any): any;
        onFocus?(...args: any): any;
        onBlur?(...args: any): any;
        readOnly?: boolean;
        required?: boolean;
        autoFocus?: boolean;
    }
    function Input(props: Input$Props): any;
    interface LanguageSelector$languageList {
        code: string;
        name?: string;
        flagUri?: string;
    }
    interface LanguageSelector$Props {
        languageList?: ("en" | "cs" | "sk" | "uk" | "it" | "ro" | "sv" | "de" | "hr" | "pl" | "nl" | "no" | "fr" | "el" | "es" | "ru" | "en-gb" | "en-us" | LanguageSelector$languageList)[];
        labelType?: "flag" | "code" | "name" | "flag-code" | "flag-name";
        itemType?: "name" | "name-code" | "flag-name" | "flag-name-code";
        displayFlag?: boolean;
    }
    function LanguageSelector(props: LanguageSelector$Props): any;
    interface Line$Props {
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        margin?: any;
        direction?: "horizontal" | "vertical";
    }
    function Line(props: Line$Props): any;
    interface Link$Props {
        onClick?(...args: any): any;
        href?: string;
        target?: string;
        download?: boolean | string;
        colorScheme?: any | any;
        significance?: any;
        size?: "xxs" | "xs" | "s" | "m" | "l" | "xl";
    }
    function Link(props: Link$Props): any;
    interface LinkPanel$Props {
        header: any;
        open?: boolean;
        onChange?(...args: any): any;
        colorScheme?: any;
        significance?: "common" | "subdued";
    }
    function LinkPanel(props: LinkPanel$Props): any;
    interface ListItem$Props {
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        actionList?: any;
        icon?: any;
        iconDragRef?(...args: any): any;
    }
    function ListItem(props: ListItem$Props): any;
    interface ListLayout$Props {
        itemList?: any;
        collapsibleItemList?: any[];
    }
    function ListLayout(props: ListLayout$Props): any;
    function MenuItem(props: any): any;
    interface MenuList$Props {
        compactSubmenu?: boolean;
    }
    function MenuList(props: MenuList$Props): any;
    interface Modal$Props {
        initialLeftOpen?: boolean;
        leftWidth?: number;
        leftType?: any;
        left?: any;
    }
    function Modal(props: Modal$Props): any;
    interface ModalBus$lsi {
    }
    interface ModalBus$Props {
        lsi?: ModalBus$lsi;
    }
    function ModalBus(props: ModalBus$Props): any;
    namespace ModalBus {
        interface RestoreButton$lsi {
        }
        interface RestoreButton$Props {
            modalId: string;
            lsi?: RestoreButton$lsi;
        }
        function RestoreButton(props: RestoreButton$Props): any;
    }
    interface Number$Props {
        value: number;
        notation?: "standard" | "scientific" | "engineering";
        format?: "long" | "short";
        unit?: string;
        unitFormat?: "long" | "short" | "narrow";
        currency?: string;
        currencyFormat?: "symbol" | "narrowSymbol" | "code" | "name";
        roundingMode?: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven";
        roundingPosition?: number;
        minDecimalDigits?: number;
        maxDecimalDigits?: number;
        minIntegerDigits?: number;
        groupingSeparator?: string;
        decimalSeparator?: string;
    }
    function Number(props: Number$Props): any;
    interface Pagination$Props {
        index?: number;
        onChange(...args: any): any;
        count: number;
        type?: "pages" | "compact";
        size?: "xxs" | "xs" | "s" | "m" | "l" | "xl";
    }
    function Pagination(props: Pagination$Props): any;
    interface Panel$Props {
        header: any;
        open?: boolean;
        onChange?(...args: any): any;
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        borderRadius?: "none" | "elementary" | "moderate" | "expressive";
        effect?: "ground" | "upper";
    }
    function Panel(props: Panel$Props): any;
    interface Pending$Props {
        type?: "circular" | "horizontal" | "dots";
        cssColor?: any;
    }
    function Pending(props: Pending$Props): any;
    interface PlaceholderBox$Props {
        significance?: "common" | "subdued";
        code?: any;
        header?: any | any;
        info?: any | any;
        actionList?: any[];
        actionDirection?: "vertical" | "horizontal";
    }
    function PlaceholderBox(props: PlaceholderBox$Props): any;
    interface Popover$Props {
        bottomSheet?: boolean;
    }
    function Popover(props: Popover$Props): any;
    interface Progress$Props {
        type?: "circular" | "horizontal";
        cssColor?: any;
        text?: any;
        suffix?: any;
    }
    function Progress(props: Progress$Props): any;
    interface RichIcon$Props {
        height?: number;
        borderRadius?: any;
        icon?: string;
        text?: any;
        size?: any;
        imageSrc?: string;
        colorScheme?: any;
        significance?: "common" | "highlighted" | "subdued";
        effect?: "ground" | "upper";
        cssBackground?: string;
        cssBackgroundHover?: string;
        cssColor?: string;
        cssColorHover?: string;
        clickable?: boolean;
        onClick?(...args: any): any;
        href?: string;
        target?: string;
    }
    function RichIcon(props: RichIcon$Props): any;
    interface RichLink$Props {
        href: string;
    }
    function RichLink(props: RichLink$Props): any;
    interface ScrollableBox$scrollIndicator {
        top?: "gradient" | "disappear";
        bottom?: "gradient" | "disappear";
        left?: "gradient" | "disappear";
        right?: "gradient" | "disappear";
    }
    interface ScrollableBox$scrollIndicatorOffset {
        topLeft?: number;
        topRight?: number;
        bottomLeft?: number;
        bottomRight?: number;
        leftTop?: number;
        leftBottom?: number;
        rightTop?: number;
        rightBottom?: number;
    }
    interface ScrollableBox$scrollElementRef {
    }
    interface ScrollableBox$Props {
        height?: any;
        minHeight?: any;
        maxHeight?: any;
        initialScrollX?: number;
        initialScrollY?: number;
        disableOverscroll?: boolean;
        scrollIndicator?: "gradient" | "disappear" | ScrollableBox$scrollIndicator;
        scrollIndicatorOffset?: ScrollableBox$scrollIndicatorOffset;
        scrollbarWidth?: number;
        scrollElementRef?: ((...args: any)=>any) | ScrollableBox$scrollElementRef;
        horizontal?: boolean;
        _skipRenderLoopDetection?: boolean;
    }
    function ScrollableBox(props: ScrollableBox$Props): any;
    namespace ScrollableBox {
        interface getScrollbarStyles$0 {
            scrollbarWidth?: any;
            device?: any;
        }
        function getScrollbarStyles(_?: getScrollbarStyles$0): any;
    }
    interface Skeleton$Props {
        aspectRatio?: any;
        size?: any;
        borderRadius?: any;
        width?: any;
        height?: any;
    }
    function Skeleton(props: Skeleton$Props): any;
    interface Stepper$Props {
        itemList?: any[];
        stepIndex?: number;
        progressIndex?: number;
        validityList?: boolean[];
        size?: "xxs" | "xs" | "s" | "m" | "l" | "xl";
        vertical?: boolean;
        displayLines?: boolean;
        iconUnfinished?: string;
        iconActive?: string;
        iconAlert?: string;
        iconFinished?: string;
        onChange?(...args: any): any;
        type?: "bullet" | "linear";
    }
    function Stepper(props: Stepper$Props): any;
    interface Svg$Props {
        code?: any;
        uri?: any;
        type?: "svg" | "img";
        colorScheme?: any;
        height?: any;
    }
    function Svg(props: Svg$Props): any;
    interface SwitchSelectVertical$Props {
        height?: any;
        itemList: any[];
    }
    function SwitchSelectVertical(props: SwitchSelectVertical$Props): any;
    interface Tabs$Props {
        activeCode?: string;
        onChange?(...args: any): any;
        contentMaxHeight?: any;
        displayBottomLine?: boolean;
    }
    function Tabs(props: Tabs$Props): any;
    interface Tag$Props {
        icon?: any;
        size?: any;
        ellipsis?: boolean;
        borderRadius?: any;
        colorScheme?: any;
        significance?: "common" | "highlighted" | "distinct" | "subdued";
        onClick?(...args: any): any;
        iconRight?: any;
        onIconRightClick?(...args: any): any;
        focused?: boolean;
    }
    function Tag(props: Tag$Props): any;
    interface Text$Props {
        colorScheme?: any;
        significance?: "common" | "subdued";
        category?: any;
        segment?(props: any, propName: any, componentName: any): any;
        type?(props: any, propName: any, componentName: any): any;
        bold?: boolean;
        italic?: boolean;
        autoFit?: boolean;
    }
    function Text(props: Text$Props): any;
    interface Tile$Props {
        significance?: "common" | "distinct" | "subdued";
        actionList?: any;
        actionCollapsedMenuProps?: any;
        displayActionList?: boolean;
        header?: any;
        headerOverlap?: boolean;
        headerSeparator?: boolean;
        headerSignificance?: "common" | "highlighted" | "distinct";
        headerColorScheme?: any;
        footer?: any;
        footerOverlap?: boolean;
        footerSeparator?: boolean;
        footerSignificance?: "common" | "highlighted" | "distinct";
        footerColorScheme?: any;
    }
    function Tile(props: Tile$Props): any;
    function Toggle(props: any): any;
    namespace Toggle {
        interface Button$Props {
            value?: boolean;
            onChange?(...args: any): any;
            colorScheme?: any;
            iconOn?: string;
            iconOff?: string;
            borderRadius?: any;
            hoverable?: boolean;
        }
        function Button(props: Button$Props): any;
    }
    const Toolbar: any;
    interface Tooltip$Props {
        significance?: "common" | "highlighted";
        delayMs?: number;
    }
    function Tooltip(props: Tooltip$Props): any;
    interface TouchButton$Props {
        colorScheme?: any;
        notification?: number;
        state?: "created" | "initial" | "active" | "final" | "alternative" | "problem" | "passive" | "failed" | "cancelled";
    }
    function TouchButton(props: TouchButton$Props): any;
    interface TouchLink$Props {
        size?: any;
        maxLines?: number;
    }
    function TouchLink(props: TouchLink$Props): any;
    interface _VirtualizedListPicker$Props {
        itemList: any[];
        selectionMode?: "single" | "multi" | "range";
        ignoreScrollSelection?: boolean;
        value?: any;
        onSelect?(...args: any): any;
        itemSize?: any;
        valueAutoScroll?: boolean;
        gap?: number;
        autoCentering?: boolean;
    }
    function _VirtualizedListPicker(props: _VirtualizedListPicker$Props): any;
    interface IconPalette$itemList$componentProps {
    }
    interface IconPalette$itemList {
        value: string;
        component?(...args: any): any;
        componentProps?: IconPalette$itemList$componentProps;
    }
    interface IconPalette$Props {
        itemList?: (string | IconPalette$itemList)[];
        value?: string;
        onSelect?(...args: any): any;
    }
    function IconPalette(props: IconPalette$Props): any;
    namespace IconPalette {
        interface Item$data$componentProps {
        }
        interface Item$data {
            component?: any;
            componentProps?: Item$data$componentProps;
            isSelected?: boolean;
            onClick?(...args: any): any;
        }
        interface Item$Props {
            insideInputBox?: boolean;
            data?: Item$data;
        }
        function Item(props: Item$Props): any;
    }
    interface SpacingProvider$Props {
        type?: "tight" | "normal" | "loose";
    }
    function SpacingProvider(props: SpacingProvider$Props): any;
    const useAlertBus: any;
    function useComponentPaste(): any;
    const useSpacing: any;
    function useScrollableParentElement(): any;
    function withTooltip(Component: any): any;
    interface ColorPalette$value {
        cssColor?: string;
        colorScheme?: string;
        shade?: string;
        hex?: string;
        opacity?: number;
    }
    interface ColorPalette$Props {
        value?: string | ColorPalette$value;
        onSelect?(...args: any): any;
        displayOpacity?: boolean;
        displayShade?: boolean;
        valueType?: "cssColor" | "object" | "colorScheme";
    }
    function ColorPalette(props: ColorPalette$Props): any;
    namespace ColorPalette {
        interface Item$Props {
            color?: string;
            size?: string;
            borderRadius?: any;
            isSelected?: boolean;
            onClick?(...args: any): any;
            insideInputBox?: boolean;
        }
        function Item(props: Item$Props): any;
    }
    interface Header$Props {
        icon?: any | string;
        onIconClick?(...args: any): any;
    }
    function Header(props: Header$Props): any;
}