export = Uu5Forms;
declare namespace Uu5Forms {
    interface Checkbox$Props {
        itemList?: any[];
        box?: boolean;
    }
    function Checkbox(props: Checkbox$Props): any;
    namespace Checkbox {
        interface Input$Props {
            significance?: "common" | "highlighted";
            icon?: any;
            onClick?(...args: any): any;
            role?: "checkbox" | "radio";
        }
        function Input(props: Input$Props): any;
        interface RadioInput$Props {
            value?: boolean;
            onChange?(...args: any): any;
        }
        function RadioInput(props: RadioInput$Props): any;
    }
    function Checkboxes(props: any): any;
    namespace Checkboxes {
        interface Input$Props {
            itemList?: any[];
            value?: any[];
        }
        function Input(props: Input$Props): any;
    }
    interface Date$presetList {
        onClick?(...args: any): any;
        children?: any;
    }
    interface Date$Props {
        min?: string;
        max?: string;
        pickerType?: "horizontal" | "vertical" | "native";
        displayWeekNumbers?: boolean;
        displayNavigation?: boolean;
        displayPicker?: boolean;
        onDisplayPickerChange?(...args: any): any;
        clearIcon?: any;
        dateMap?: any;
        weekStartDay?: any;
        timeZone?: any;
        format?: string;
        presetList?: ("today" | Date$presetList)[];
    }
    function Date(props: Date$Props): any;
    namespace Date {
        interface Box$Props {
            format?: string;
            value?: string | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface DateRange$presetList {
        onClick?(...args: any): any;
        children?: any;
    }
    interface DateRange$Props {
        value?: any[] | string;
        onChange?(...args: any): any;
        min?: string;
        max?: string;
        displayWeekNumbers?: boolean;
        displayNavigation?: boolean;
        displayPresets?: boolean;
        weekStartDay?: any;
        timeZone?: any;
        format?: string;
        presetList?: ("today" | "yesterday" | "last7Days" | "last30Days" | "thisMonth" | "previousMonth" | DateRange$presetList)[];
    }
    function DateRange(props: DateRange$Props): any;
    namespace DateRange {
        interface Box$Props {
            format?: string;
            value?: string | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface DateTime$Props {
        pickerType?: "vertical" | "native";
        rangePosition?: any;
    }
    function DateTime(props: DateTime$Props): any;
    namespace DateTime {
        const Input: any;
    }
    interface DateTimeRangeProvider$Props {
        min?: string;
        max?: string;
        timeOffset?: number;
    }
    function DateTimeRangeProvider(props: DateTimeRangeProvider$Props): any;
    function Email(props: any): any;
    namespace Email {
        const Input: any;
    }
    interface File$lsi {
    }
    interface File$Props {
        value?: any;
        accept?: string;
        capture?: "user" | "environment";
        multiple?: boolean;
        lsi?: File$lsi;
    }
    function File(props: File$Props): any;
    namespace File {
        const Input: any;
    }
    interface Label$Props {
        children?: any | any;
        info?: any | any;
        required?: boolean;
        size?: any;
        htmlFor?: string;
        colorScheme?: string;
        significance?: string;
    }
    function Label(props: Label$Props): any;
    function Link(props: any): any;
    namespace Link {
        const Input: any;
    }
    interface Message$Props {
        size?: any;
        children?: any | any;
        feedback?: "success" | "warning" | "error";
        params?: any[];
        initialShowDelayed?: boolean;
    }
    function Message(props: Message$Props): any;
    interface Lsi$value {
    }
    interface Lsi$languageList {
        code: string;
        name?: string;
        required?: boolean;
    }
    interface Lsi$Props {
        value?: Lsi$value;
        languageList?: (string | Lsi$languageList)[];
    }
    function Lsi(props: Lsi$Props): any;
    namespace Lsi {
        const Input: any;
    }
    interface Month$Props {
        pickerType?: "vertical" | "native";
        clearIcon?: any;
    }
    function Month(props: Month$Props): any;
    namespace Month {
        const Input: any;
    }
    interface MonthRange$Props {
        value?: string[] | string;
        onChange?(...args: any): any;
        min?: string;
        max?: string;
    }
    function MonthRange(props: MonthRange$Props): any;
    namespace MonthRange {
        interface Box$Props {
            value?: string | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    function Number(props: any): any;
    namespace Number {
        const Input: any;
    }
    interface Password$Props {
        revealable?: boolean;
        revealableIconOn?: string;
        revealableIconOff?: string;
    }
    function Password(props: Password$Props): any;
    namespace Password {
        const Input: any;
    }
    interface Quarter$Props {
        value?: string;
        onChange?(...args: any): any;
        min?: string;
        max?: string;
    }
    function Quarter(props: Quarter$Props): any;
    namespace Quarter {
        interface Box$Props {
            inputBoxRef?: any;
            value?: string;
            onChange?(...args: any): any;
            onClick?(...args: any): any;
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface QuarterRange$Props {
        value?: string[] | string;
        min?: string;
        max?: string;
    }
    function QuarterRange(props: QuarterRange$Props): any;
    namespace QuarterRange {
        interface Box$Props {
            value?: string | string[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    function Radios(props: any): any;
    namespace Radios {
        interface Input$Props {
            value?: any;
            itemList?: any[];
        }
        function Input(props: Input$Props): any;
    }
    interface Select$Props {
        value?: any;
    }
    function Select(props: Select$Props): any;
    namespace Select {
        const Input: any;
        interface Field$Props {
            displayOptions?: any;
            displayTags?: any;
        }
        function Field(props: Field$Props): any;
        interface Options$Props {
            height?: any;
        }
        function Options(props: Options$Props): any;
        function SelectedOptions(props: any): any;
    }
    interface Slider$Props {
        tickStep?: number;
        displayTick?: boolean;
        displayTooltip?: boolean;
        maxTickWidth?: number;
    }
    function Slider(props: Slider$Props): any;
    namespace Slider {
        const Input: any;
    }
    interface SwitchSelect$Props {
        itemList?: any;
    }
    function SwitchSelect(props: SwitchSelect$Props): any;
    namespace SwitchSelect {
        const Input: any;
    }
    interface Text$Props {
        spellCheck?: boolean;
    }
    function Text(props: Text$Props): any;
    namespace Text {
        const Input: any;
    }
    interface TextArea$0 {
        className?: any;
    }
    function TextArea(props: TextArea$0): any;
    namespace TextArea {
        interface Input$Props {
            spellCheck?: boolean;
            rows?: number;
            autoResize?: boolean;
            maxRows?: number;
        }
        function Input(props: Input$Props): any;
    }
    interface TextSelect$lsi {
    }
    interface TextSelect$Props {
        value?: any;
        onFilter?(...args: any): any;
        insertable?: boolean;
        lsi?: TextSelect$lsi;
    }
    function TextSelect(props: TextSelect$Props): any;
    namespace TextSelect {
        const Input: any;
        interface Field$Props {
            displayOptions?: any;
            displayTags?: any;
        }
        function Field(props: Field$Props): any;
        interface Options$Props {
            height?: any;
        }
        function Options(props: Options$Props): any;
        namespace Options {
            const height: "auto";
        }
        function SelectedOptions(props: any): any;
    }
    interface TextSelectAsync$lsi {
    }
    interface TextSelectAsync$Props {
        initialItemList?: any[];
        onSearch(...args: any): any;
        value?: any;
        lsi?: TextSelectAsync$lsi;
    }
    function TextSelectAsync(props: TextSelectAsync$Props): any;
    namespace TextSelectAsync {
        const Input: any;
        interface Field$Props {
            displayOptions?: any;
            displayTags?: any;
        }
        function Field(props: Field$Props): any;
        interface Options$Props {
            height?: any;
        }
        function Options(props: Options$Props): any;
        namespace Options {
            const height: "auto";
        }
        function SelectedOptions(props: any): any;
    }
    interface Time$Props {
        pickerType?: "vertical" | "native";
        displaySeconds?: boolean;
        format?: 12 | 24;
        step?: any;
        displayPicker?: boolean;
        onDisplayPickerChange?(...args: any): any;
        clearIcon?: any;
        preselectedPickerValue?: any;
        timeZone?: string;
        date?: string;
        summerTimeTemplate?(...args: any): any;
        winterTimeTemplate?(...args: any): any;
    }
    function Time(props: Time$Props): any;
    namespace Time {
        const Input: any;
    }
    interface Week$Props {
        weekStartDay?: any;
        timeZone?: any;
        pickerType?: "vertical" | "native";
        clearIcon?: any;
    }
    function Week(props: Week$Props): any;
    namespace Week {
        const Input: any;
    }
    interface WeekRange$Props {
        weekStartDay?: any;
        timeZone?: any;
        value?: string[] | string;
    }
    function WeekRange(props: WeekRange$Props): any;
    namespace WeekRange {
        const Input: any;
    }
    interface Wizard$Provider$Props {
        validationMode?: "wizard" | "loose" | "strict";
        itemList?: any[];
        stepIndex?: number;
        progressIndex?: number;
        validityList?: boolean[];
        onItemListChange?(...args: any): any;
        onStepIndexChange?(...args: any): any;
        onProgressIndexChange?(...args: any): any;
        onValidityListChange?(...args: any): any;
    }
    interface Wizard$PreviousButton$lsi {
    }
    interface Wizard$PreviousButton$Props {
        lsi?: Wizard$PreviousButton$lsi;
    }
    interface Wizard$SubmitButton$lsi {
    }
    interface Wizard$SubmitButton$Props {
        lsi?: Wizard$SubmitButton$lsi;
    }
    const Wizard: {
        Provider(props: Wizard$Provider$Props): any;
        Stepper(props: any): any;
        Content(props: any): any;
        PreviousButton(props: Wizard$PreviousButton$Props): any;
        SubmitButton(props: Wizard$SubmitButton$Props): any;
    };
    interface Year$Props {
        clearIcon?: any;
    }
    function Year(props: Year$Props): any;
    namespace Year {
        const Input: any;
    }
    interface YearRange$Props {
        value?: number[] | number;
        min?: number;
        max?: number;
    }
    function YearRange(props: YearRange$Props): any;
    namespace YearRange {
        interface Box$Props {
            value?: number | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface CancelButton$lsi {
    }
    interface CancelButton$Props {
        lsi?: CancelButton$lsi;
    }
    function CancelButton(props: CancelButton$Props): any;
    function Form(props: any): any;
    namespace Form {
        interface View$inputMap {
        }
        interface View$lsi {
        }
        interface View$Props {
            gridLayout?: any;
            inputMap?: View$inputMap;
            lsi?: View$lsi;
        }
        function View(props: View$Props): any;
        const Provider: any;
    }
    interface FormCheckbox$Props {
        itemList?: any[];
        box?: boolean;
    }
    function FormCheckbox(props: FormCheckbox$Props): any;
    namespace FormCheckbox {
        interface Input$Props {
            significance?: "common" | "highlighted";
            icon?: any;
            onClick?(...args: any): any;
            role?: "checkbox" | "radio";
        }
        function Input(props: Input$Props): any;
        interface RadioInput$Props {
            value?: boolean;
            onChange?(...args: any): any;
        }
        function RadioInput(props: RadioInput$Props): any;
    }
    function FormCheckboxes(props: any): any;
    namespace FormCheckboxes {
        interface Input$Props {
            itemList?: any[];
            value?: any[];
        }
        function Input(props: Input$Props): any;
    }
    interface FormDate$presetList {
        onClick?(...args: any): any;
        children?: any;
    }
    interface FormDate$Props {
        min?: string;
        max?: string;
        pickerType?: "horizontal" | "vertical" | "native";
        displayWeekNumbers?: boolean;
        displayNavigation?: boolean;
        displayPicker?: boolean;
        onDisplayPickerChange?(...args: any): any;
        clearIcon?: any;
        dateMap?: any;
        weekStartDay?: any;
        timeZone?: any;
        format?: string;
        presetList?: ("today" | FormDate$presetList)[];
    }
    function FormDate(props: FormDate$Props): any;
    namespace FormDate {
        interface Box$Props {
            format?: string;
            value?: string | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface FormDateRange$presetList {
        onClick?(...args: any): any;
        children?: any;
    }
    interface FormDateRange$Props {
        value?: any[] | string;
        onChange?(...args: any): any;
        min?: string;
        max?: string;
        displayWeekNumbers?: boolean;
        displayNavigation?: boolean;
        displayPresets?: boolean;
        weekStartDay?: any;
        timeZone?: any;
        format?: string;
        presetList?: ("today" | "yesterday" | "last7Days" | "last30Days" | "thisMonth" | "previousMonth" | FormDateRange$presetList)[];
    }
    function FormDateRange(props: FormDateRange$Props): any;
    namespace FormDateRange {
        interface Box$Props {
            format?: string;
            value?: string | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface FormDateTime$Props {
        pickerType?: "vertical" | "native";
        rangePosition?: any;
    }
    function FormDateTime(props: FormDateTime$Props): any;
    namespace FormDateTime {
        const Input: any;
    }
    function FormEmail(props: any): any;
    namespace FormEmail {
        const Input: any;
    }
    interface FormFile$lsi {
    }
    interface FormFile$Props {
        value?: any;
        accept?: string;
        capture?: "user" | "environment";
        multiple?: boolean;
        lsi?: FormFile$lsi;
    }
    function FormFile(props: FormFile$Props): any;
    namespace FormFile {
        const Input: any;
    }
    function FormLink(props: any): any;
    namespace FormLink {
        const Input: any;
    }
    interface FormLsi$value {
    }
    interface FormLsi$languageList {
        code: string;
        name?: string;
        required?: boolean;
    }
    interface FormLsi$Props {
        value?: FormLsi$value;
        languageList?: (string | FormLsi$languageList)[];
    }
    function FormLsi(props: FormLsi$Props): any;
    namespace FormLsi {
        const Input: any;
    }
    interface FormMonth$Props {
        pickerType?: "vertical" | "native";
        clearIcon?: any;
    }
    function FormMonth(props: FormMonth$Props): any;
    namespace FormMonth {
        const Input: any;
    }
    interface FormMonthRange$Props {
        value?: string[] | string;
        onChange?(...args: any): any;
        min?: string;
        max?: string;
    }
    function FormMonthRange(props: FormMonthRange$Props): any;
    namespace FormMonthRange {
        interface Box$Props {
            value?: string | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    function FormNumber(props: any): any;
    namespace FormNumber {
        const Input: any;
    }
    interface FormPassword$Props {
        revealable?: boolean;
        revealableIconOn?: string;
        revealableIconOff?: string;
    }
    function FormPassword(props: FormPassword$Props): any;
    namespace FormPassword {
        const Input: any;
    }
    interface FormQuarter$Props {
        value?: string;
        onChange?(...args: any): any;
        min?: string;
        max?: string;
    }
    function FormQuarter(props: FormQuarter$Props): any;
    namespace FormQuarter {
        interface Box$Props {
            inputBoxRef?: any;
            value?: string;
            onChange?(...args: any): any;
            onClick?(...args: any): any;
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface FormQuarterRange$Props {
        value?: string[] | string;
        min?: string;
        max?: string;
    }
    function FormQuarterRange(props: FormQuarterRange$Props): any;
    namespace FormQuarterRange {
        interface Box$Props {
            value?: string | string[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    function FormRadios(props: any): any;
    namespace FormRadios {
        interface Input$Props {
            value?: any;
            itemList?: any[];
        }
        function Input(props: Input$Props): any;
    }
    interface FormSelect$Props {
        value?: any;
    }
    function FormSelect(props: FormSelect$Props): any;
    namespace FormSelect {
        const Input: any;
        interface Field$Props {
            displayOptions?: any;
            displayTags?: any;
        }
        function Field(props: Field$Props): any;
        interface Options$Props {
            height?: any;
        }
        function Options(props: Options$Props): any;
        function SelectedOptions(props: any): any;
    }
    function FormSlider(props: any): any;
    interface FormSwitchSelect$Props {
        itemList?: any;
    }
    function FormSwitchSelect(props: FormSwitchSelect$Props): any;
    namespace FormSwitchSelect {
        const Input: any;
    }
    interface FormText$Props {
        spellCheck?: boolean;
    }
    function FormText(props: FormText$Props): any;
    namespace FormText {
        const Input: any;
    }
    interface FormTextArea$0 {
        className?: any;
    }
    function FormTextArea(props: FormTextArea$0): any;
    namespace FormTextArea {
        interface Input$Props {
            spellCheck?: boolean;
            rows?: number;
            autoResize?: boolean;
            maxRows?: number;
        }
        function Input(props: Input$Props): any;
    }
    interface FormTextSelect$lsi {
    }
    interface FormTextSelect$Props {
        value?: any;
        onFilter?(...args: any): any;
        insertable?: boolean;
        lsi?: FormTextSelect$lsi;
    }
    function FormTextSelect(props: FormTextSelect$Props): any;
    namespace FormTextSelect {
        const Input: any;
        interface Field$Props {
            displayOptions?: any;
            displayTags?: any;
        }
        function Field(props: Field$Props): any;
        interface Options$Props {
            height?: any;
        }
        function Options(props: Options$Props): any;
        namespace Options {
            const height: "auto";
        }
        function SelectedOptions(props: any): any;
    }
    interface FormTextSelectAsync$lsi {
    }
    interface FormTextSelectAsync$Props {
        initialItemList?: any[];
        onSearch(...args: any): any;
        value?: any;
        lsi?: FormTextSelectAsync$lsi;
    }
    function FormTextSelectAsync(props: FormTextSelectAsync$Props): any;
    namespace FormTextSelectAsync {
        const Input: any;
        interface Field$Props {
            displayOptions?: any;
            displayTags?: any;
        }
        function Field(props: Field$Props): any;
        interface Options$Props {
            height?: any;
        }
        function Options(props: Options$Props): any;
        namespace Options {
            const height: "auto";
        }
        function SelectedOptions(props: any): any;
    }
    interface FormTime$Props {
        pickerType?: "vertical" | "native";
        displaySeconds?: boolean;
        format?: 12 | 24;
        step?: any;
        displayPicker?: boolean;
        onDisplayPickerChange?(...args: any): any;
        clearIcon?: any;
        preselectedPickerValue?: any;
        timeZone?: string;
        date?: string;
        summerTimeTemplate?(...args: any): any;
        winterTimeTemplate?(...args: any): any;
    }
    function FormTime(props: FormTime$Props): any;
    namespace FormTime {
        const Input: any;
    }
    interface FormWeek$Props {
        weekStartDay?: any;
        timeZone?: any;
        pickerType?: "vertical" | "native";
        clearIcon?: any;
    }
    function FormWeek(props: FormWeek$Props): any;
    namespace FormWeek {
        const Input: any;
    }
    interface FormWeekRange$Props {
        weekStartDay?: any;
        timeZone?: any;
        value?: string[] | string;
    }
    function FormWeekRange(props: FormWeekRange$Props): any;
    namespace FormWeekRange {
        const Input: any;
    }
    interface FormYear$Props {
        clearIcon?: any;
    }
    function FormYear(props: FormYear$Props): any;
    namespace FormYear {
        const Input: any;
    }
    interface FormYearRange$Props {
        value?: number[] | number;
        min?: number;
        max?: number;
    }
    function FormYearRange(props: FormYearRange$Props): any;
    namespace FormYearRange {
        interface Box$Props {
            value?: number | any[];
        }
        function Box(props: Box$Props): any;
        const Input: any;
    }
    interface ResetButton$lsi {
    }
    interface ResetButton$Props {
        type?: "reset" | "step";
        lsi?: ResetButton$lsi;
    }
    function ResetButton(props: ResetButton$Props): any;
    interface SubmitButton$lsi {
    }
    interface SubmitButton$Props {
        type?: "submit" | "step";
        lsi?: SubmitButton$lsi;
    }
    function SubmitButton(props: SubmitButton$Props): any;
    interface Icon$Props {
        iconOpen?: string;
        iconClosed?: string;
    }
    function Icon(props: Icon$Props): any;
    namespace Icon {
        const Input: any;
        interface Picker$categoryList$label {
        }
        interface Picker$categoryList$itemList$componentProps {
        }
        interface Picker$categoryList$itemList {
            value?: string;
            component?(...args: any): any;
            componentProps?: Picker$categoryList$itemList$componentProps;
        }
        interface Picker$categoryList {
            name?: string;
            label?: any | Picker$categoryList$label;
            itemList?: (string | Picker$categoryList$itemList)[];
        }
        interface Picker$Props {
            onSelect?(...args: any): any;
            value?: string;
            initialCategory?: string;
            categoryList?: ("uugds" | "plus4u" | "mdi" | "all" | Picker$categoryList)[];
        }
        function Picker(props: Picker$Props): any;
    }
    interface FormIcon$Props {
        iconOpen?: string;
        iconClosed?: string;
    }
    function FormIcon(props: FormIcon$Props): any;
    namespace FormIcon {
        const Input: any;
        interface Picker$categoryList$label {
        }
        interface Picker$categoryList$itemList$componentProps {
        }
        interface Picker$categoryList$itemList {
            value?: string;
            component?(...args: any): any;
            componentProps?: Picker$categoryList$itemList$componentProps;
        }
        interface Picker$categoryList {
            name?: string;
            label?: any | Picker$categoryList$label;
            itemList?: (string | Picker$categoryList$itemList)[];
        }
        interface Picker$Props {
            onSelect?(...args: any): any;
            value?: string;
            initialCategory?: string;
            categoryList?: ("uugds" | "plus4u" | "mdi" | "all" | Picker$categoryList)[];
        }
        function Picker(props: Picker$Props): any;
    }
    interface Color$Props {
        value?: string | any;
        iconOpen?: string;
        iconClosed?: string;
        iconRight?: string;
        valueType?: "cssColor" | "object" | "colorScheme";
    }
    function Color(props: Color$Props): any;
    namespace Color {
        const Input: any;
        interface Picker$value {
            cssColor?: string;
            colorScheme?: string;
            shade?: string;
            hex?: string;
            opacity?: number;
        }
        interface Picker$Props {
            onSelect?(...args: any): any;
            value?: string | Picker$value;
            valueType?: "colorScheme" | "object";
            displayShade?: boolean;
            displayOpacity?: boolean;
            displayCustomColor?: boolean;
        }
        function Picker(props: Picker$Props): any;
    }
    interface FormColor$Props {
        value?: string | any;
        iconOpen?: string;
        iconClosed?: string;
        iconRight?: string;
        valueType?: "cssColor" | "object" | "colorScheme";
    }
    function FormColor(props: FormColor$Props): any;
    namespace FormColor {
        const Input: any;
        interface Picker$value {
            cssColor?: string;
            colorScheme?: string;
            shade?: string;
            hex?: string;
            opacity?: number;
        }
        interface Picker$Props {
            onSelect?(...args: any): any;
            value?: string | Picker$value;
            valueType?: "colorScheme" | "object";
            displayShade?: boolean;
            displayOpacity?: boolean;
            displayCustomColor?: boolean;
        }
        function Picker(props: Picker$Props): any;
    }
    interface useDateTimeFormat$1 {
    }
    function useDateTimeFormat(value: any, inputProps?: useDateTimeFormat$1): any;
    const useForm: any;
    function useFormApi(): any;
    function useWizard(): any;
    interface useValidatorMap$1 {
    }
    interface useValidatorMap$2 {
    }
    function useValidatorMap(props: any, validatorItemMap?: useValidatorMap$1, options?: useValidatorMap$2): any;
    function withExtensionInput(Component: any, defaultProps: any): any;
    function withFormInput(Input: any, defaultProps: any): any;
    function withFormItem(FormInput: any): any;
    function withValidationInput(Input: any, isValidValue?: (value: any)=>any): any;
    interface withValidationMap$1 {
    }
    function withValidationMap(Input: any, defaultValidationMap?: withValidationMap$1): any;
    function _withValidationMap(Input: any, defaultValidationMap: any, _initValidatorList: any): any;
    interface _TimePicker$Props {
        value?: string;
        onSelect?(...args: any): any;
        displayTitles?: boolean;
        format?: 12 | 24;
        displaySeconds?: boolean;
        step?: any;
        min?: string;
        max?: string;
        preselectedPickerValue?: string;
        date?: string;
    }
    function _TimePicker(props: _TimePicker$Props): any;
    interface NativeDateInput$0 {
        format?: any;
    }
    function NativeDateInput(_: NativeDateInput$0, ref: any): any;
    namespace NativeDateInput {
        const defaultProps: {
            format: any;
        };
    }
    interface NativeTimeInput$0 {
        date?: any;
        timeZone?: any;
        format?: any;
    }
    function NativeTimeInput(_: NativeTimeInput$0, ref: any): any;
}