function testVisualProperties(setup, opts = {}) {
  it("checks id property is properly passed", async () => {
    const id = "id-1";
    const { element } = await setup({ id });

    expect(element).toHaveAttribute("id", id);
  });

  it("checks className property is properly passed", async () => {
    const className = "class-1";
    const { element } = await setup({ className });

    expect(element).toHaveClass(className);
  });

  it("checks style property is properly passed", async () => {
    const style = "margin: 50px;";
    const { element } = await setup({ style });

    expect(element).toHaveStyle(style);
  });

  const excludes = opts.excludes || [];
  if (!excludes.includes("disabled")) {
    it("checks disabled property is properly passed", async () => {
      const { element } = await setup({ disabled: true });

      expect(element).toHaveAttribute("disabled", "");
    });
  }

  it("checks hidden property is properly passed", async () => {
    const { element } = await setup({ hidden: true });

    expect(element).toHaveAttribute("hidden", "");
  });

  it("checks elementRef property is properly passed", async () => {
    const { Utils } = require("uu5g05");

    const id = "id-1";
    const elementRef = Utils.Component.createRef();
    const { element } = await setup({ id, elementRef });

    expect(element).toHaveAttribute("id", id);
    expect(elementRef.current).toHaveAttribute("id", id);
  });

  it("checks elementAttrs property is properly passed", async () => {
    const testId = "component-1";
    const elementAttrs = { "data-test-attribute": testId };
    const { element } = await setup({ elementAttrs });

    expect(element).toHaveAttribute("data-test-attribute", testId);
  });

  it("checks noPrint property is properly passed", async () => {
    const { element } = await setup({ noPrint: true });

    // TODO MFA Improve this test
    const classList = Array.from(element.classList);
    const noPrintClass = classList.find((item) => item.includes("uu-"));
    expect(noPrintClass).not.toBeUndefined();
  });

  it("checks fullTextSearchPriority  property is properly passed", async () => {
    const fullTextSearchPriority = 3;
    const { element } = await setup({ fullTextSearchPriority });

    expect(element).toHaveClass(`uu-fulltextsearch-${fullTextSearchPriority}`);
  });
}

module.exports = { testVisualProperties };
