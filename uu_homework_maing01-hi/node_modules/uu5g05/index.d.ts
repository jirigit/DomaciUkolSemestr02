export = Uu5;
declare namespace Uu5 {
    const useLanguage: any;
    const useLevel: any;
    const useScreenSize: any;
    const useTimeZone: any;
    const useSession: any;
    const useUserPreferences: any;
    const useRouteLeave: any;
    const useRoute: any;
    function useDynamicLibraryComponent(uu5Tag: any): any;
    const _react: any;
    function createComponent(component: any, isRef?: boolean): any;
    function createComponentWithRef(component: any): any;
    function createHoc(args: any, isRef?: boolean): any;
    function createVisualComponent(component: any): any;
    function createVisualComponentWithRef(component: any): any;
    const Suspense: any;
    const Fragment: any;
    interface AutoLoad$Props {
        distance?: number;
        data?: any[];
        handleLoadNext?(...args: any): any;
    }
    function AutoLoad(props: AutoLoad$Props): any;
    interface Content$Props {
        nestingLevel?: string;
        childrenNestingLevel?: string;
        parent?: any;
        fallback?: any;
    }
    function Content(props: Content$Props): any;
    interface DynamicLibraryComponent$props {
    }
    interface DynamicLibraryComponent$Props {
        uu5Tag: string;
        props?: DynamicLibraryComponent$props;
    }
    function DynamicLibraryComponent(props: DynamicLibraryComponent$Props): any;
    const ErrorBoundary: any;
    interface Lsi$params {
    }
    interface Lsi$Props {
        lsi?: any;
        params?: (string | number | boolean | any)[] | Lsi$params;
        import?(...args: any): any;
        path?: (string | number)[];
    }
    function Lsi(props: Lsi$Props): any;
    const RenderCounter: any;
    const Environment: {
        appBaseUri: any;
        trustedUriRegExp: any;
        uu5DataMap: any;
        plus4UGoBaseUri: any;
        componentUveUri: any;
        libraryRegistryBaseUri: any;
        isMobileApp: any;
        isSimpleRender: any;
        get(key: any, defaultValue: any): any;
    };
    function withLazy(importFn: any, fallback?: string, statics: any): any;
    function withLsi(Component: any, propList: any): any;
    function withStickyTop(Component: any, stickyVisibility?: any): any;
    const useCallback: any;
    const useContext: any;
    const useEffect: any;
    const useImperativeHandle: any;
    const useDebugValue: any;
    const useLayoutEffect: any;
    const useMemo: any;
    const useReducer: any;
    const useRef: any;
    const useState: any;
    const useDeferredValue: any;
    const useTransition: any;
    const useId: any;
    const useSyncExternalStore: any;
    const useInsertionEffect: any;
    function useAppBackground(): any;
    function useBackground(propsBackground: any): any;
    function useCall(callFn: any): any;
    function useComponentVisibility(offsetTop: any, offsetBottom?: any): any;
    function useContentSizeValue(sizeOf: any): any;
    function useContentSize(): any;
    const useDataController: any;
    const useDataFilter: any;
    interface useDataList$0 {
        initialData?: any;
        initialDtoIn?: any;
        pageSize?: any;
        itemIdentifier?: any;
        handlerMap?: any;
        itemHandlerMap?: any;
        skipInitialLoad?: any;
    }
    function useDataList(_?: useDataList$0, loadDependencies?: any): any;
    interface useDataObject$0 {
        initialData?: any;
        initialDtoIn?: any;
        skipInitialLoad?: any;
        handlerMap?: any;
    }
    function useDataObject(_?: useDataObject$0, loadDependencies?: any): any;
    const useDataSelection: any;
    const useDataSorter: any;
    const useDataStore: any;
    function useDevice(): any;
    function useToolbar(): any;
    interface useElementSize$0 {
        width?: any;
        height?: any;
        contentWidth?: any;
        contentHeight?: any;
        interval?: any;
    }
    function useElementSize(_?: useElementSize$0): any;
    function useEvent(eventName: any, handler: any, element: any, opts: any): any;
    function useLanguageList(): any;
    function useLsi(lsi: any, path?: any): any;
    function useLsiValues(lsi: any): any;
    function useMemoObject(obj: any, equals?: (objA: any, objB: any)=>any): any;
    function usePreviousValue(curValue: any, initialValue?: any): any;
    function usePrint(): any;
    function usePrintBlocker(): any;
    const useRouteBack: any;
    function useRouter(routeMap: any): any;
    function useScrollDirection(refOrElementOrWindow?: any): any;
    const useSelection: any;
    interface useSlide$0 {
        onStart?: any;
        onEnd?: any;
        onMove?: any;
    }
    function useSlide(_?: useSlide$0): any;
    function useStickyTop(visibility?: string, gatherMetrics?: boolean, forcedStuckHeight: any): any;
    function useTraceUpdate(props: any): any;
    function useUnmountedRef(curValue: any, initialValue?: any): any;
    function useUpdateEffect(fn: any, deps: any): any;
    function useUpdateLayoutEffect(fn: any, deps: any): any;
    function useUveVisibility(): any;
    function useValueChange(value: any, onChange: any): any;
    function useViewportVisibility(offsetTop?: number, offsetBottom?: any): any;
    function useWillMount(func: any): any;
    interface AppBackgroundProvider$Props {
        background?: any;
    }
    function AppBackgroundProvider(props: AppBackgroundProvider$Props): any;
    interface BackgroundProvider$Props {
        background?: any;
    }
    function BackgroundProvider(props: BackgroundProvider$Props): any;
    interface ContentSizeProvider$Props {
        contentSize?: any;
        onChange?(...args: any): any;
    }
    function ContentSizeProvider(props: ContentSizeProvider$Props): any;
    interface DataControllerProvider$Props {
        itemIdentifier?: string | string[];
        data?: any[];
        filterDefinitionList?: any[];
        filterList?: any[];
        onFilterChange?(...args: any): any;
        sorterDefinitionList?: any[];
        sorterList?: any[];
        onSorterChange?(...args: any): any;
        selectable?: boolean | "none" | "multiple" | "single";
        initialIsDisplayedSelected?: boolean;
        initialSelectedData?: any[];
    }
    function DataControllerProvider(props: DataControllerProvider$Props): any;
    namespace DataControllerProvider {
        function create(): any;
    }
    interface DataStoreProvider$handlerMap {
    }
    interface DataStoreProvider$itemHandlerMap {
    }
    interface DataStoreProvider$Props {
        initialData?: any[];
        initialDtoIn?: any;
        pageSize?: number;
        handlerMap?: DataStoreProvider$handlerMap;
        itemHandlerMap?: DataStoreProvider$itemHandlerMap;
    }
    function DataStoreProvider(props: DataStoreProvider$Props): any;
    interface DeviceProvider$Props {
        browserName?: string;
        platform?: string;
        hasTouch?: boolean;
        hasPointer?: boolean;
        orientation?: "portrait-primary" | "portrait-secondary" | "landscape-primary" | "landscape-secondary";
        isWebView?: boolean;
        isHeadless?: boolean;
        isMobileOrTablet?: boolean;
    }
    function DeviceProvider(props: DeviceProvider$Props): any;
    function ToolbarProvider(props: any): any;
    interface LanguageListProvider$Props {
        languageList?: string[];
        onChange?(...args: any): any;
    }
    function LanguageListProvider(props: LanguageListProvider$Props): any;
    interface LanguageProvider$Props {
        language?: string;
        onChange?(...args: any): any;
    }
    function LanguageProvider(props: LanguageProvider$Props): any;
    interface LevelProvider$Props {
        level?: number;
        onChange?(...args: any): any;
    }
    function LevelProvider(props: LevelProvider$Props): any;
    interface PortalElementProvider$element {
    }
    interface PortalElementProvider$Props {
        element?: PortalElementProvider$element;
        filter?(...args: any): any;
    }
    function PortalElementProvider(props: PortalElementProvider$Props): any;
    interface RouteProvider$initialRoute$params {
    }
    interface RouteProvider$initialRoute {
        uu5Route?: string;
        params?: RouteProvider$initialRoute$params;
    }
    interface RouteProvider$Props {
        initialRoute?: RouteProvider$initialRoute;
    }
    function RouteProvider(props: RouteProvider$Props): any;
    interface ScreenSizeProvider$Props {
        screenSize?: any;
        onChange?(...args: any): any;
    }
    function ScreenSizeProvider(props: ScreenSizeProvider$Props): any;
    interface SelectionProvider$Props {
        value?: number;
        count: number;
    }
    function SelectionProvider(props: SelectionProvider$Props): any;
    interface SessionProvider$authenticationService$initPromise {
    }
    interface SessionProvider$authenticationService {
        initComplete?: boolean;
        initPromise?: SessionProvider$authenticationService$initPromise;
        addListener?(...args: any): any;
        removeListener?(...args: any): any;
        getCurrentSession?(...args: any): any;
        isSessionExpiring?(...args: any): any;
        authenticate?(...args: any): any;
    }
    interface SessionProvider$Props {
        authenticationService: ((...args: any)=>any) | SessionProvider$authenticationService;
    }
    function SessionProvider(props: SessionProvider$Props): any;
    interface TimeZoneProvider$Props {
        timeZone?: string;
        onChange?(...args: any): any;
    }
    function TimeZoneProvider(props: TimeZoneProvider$Props): any;
    interface UserPreferencesProvider$Props {
        timeZone?: string;
        shortDateFormat?: string;
        mediumDateFormat?: string;
        longDateFormat?: string;
        weekStartDay?: number;
        hourFormat?: 12 | 24 | "12" | "24";
        languageList?: string[];
        numberGroupingSeparator?: string;
        numberDecimalSeparator?: string;
        currency?: string;
        currencyGroupingSeparator?: string;
        currencyDecimalSeparator?: string;
        onChange?(...args: any): any;
    }
    function UserPreferencesProvider(props: UserPreferencesProvider$Props): any;
    namespace PropTypes {
        function isRequiredIf(propType: any, isRequired: any): any;
        function sizeOf(valueType: any): any;
        const background: "light" | "dark" | "soft" | "full";
        const borderRadius: "none" | "elementary" | "moderate" | "expressive" | "full";
        const icon: string | any;
        function colorScheme(...categories: any): any;
        interface lsi$ {
        }
        const lsi: string | lsi$;
        interface space$ {
            top?: string | number;
            right?: string | number;
            bottom?: string | number;
            left?: string | number;
        }
        const space: string | number | space$;
        const unit: string | number;
        const COLOR_SCHEME: {
            building: string[];
            meaning: string[];
            basic: string[];
            state: string[];
            priority: string[];
        };
        const COLOR_SCHEME_LIST: any;
    }
    namespace Utils {
        const Clipboard: {
            read(event: any, type?: string): any;
            write(textOrMimeTypeMap: any, e: any): Promise<any>;
        };
        const Color: {
            toRgba(cssColor: any): any;
            toHex(cssColor: any, preserveAlpha?: boolean): any;
            isLight(cssColor: any): any;
        };
        const Component: {
            lazy: any;
            memo(...args: any): any;
            createRef: any;
            forwardRef: any;
            combineRefs(...refs: any): any;
            mergeStatics(CompNew: any, CompWrapped: any): any;
            toUu5String(Component: any, props: any): any;
            getUu5StringProps(props: any, allowedProps?: any[]): any;
        };
        interface Content$build$1 {
            parent?: any;
            nestingLevel?: any;
            childrenNestingLevel?: any;
        }
        const Content: {
            build(children: any, _: Content$build$1, statics: any): any;
        };
        const Context: {
            create(defaultValue: any): any;
        };
        const Css: {
            createCssModule(key: any, owner?: any): any;
            joinClassName(...classNames: any): any;
        };
        const Dom: {
            render: any;
            findNode: any;
            hydrate: any;
            unmount: any;
            createPortal: any;
            flushSync: any;
            addCss(styleSheetUri: any, asFirst?: boolean): any;
        };
        const Element: {
            create(...args: any): any;
            clone(...args: any): any;
            isValid(...args: any): any;
        };
        const Error: {
            Message: any;
        };
        const Event: any;
        const EventManager: {
            register(event: any, fn: any, element?: any, opts: any): any;
            unregister(event: any, fn: any, element?: any, opts: any): any;
            trigger(key: any, ...args: any): any;
        };
        interface Function$debounce$2 {
        }
        const Function: {
            memo: any;
            debounce(func: any, wait?: number, options?: Function$debounce$2): any;
        };
        const Language: {
            setLanguage(language: any): any;
            getLanguage(): any;
            getItem(lsi: any, language?: any): any;
        };
        interface LibraryRegistry$registerLibrary$0 {
            name?: any;
            version?: any;
            namespace?: any;
        }
        interface LibraryRegistry$getLibrary$1 {
            generation?: any;
            version?: any;
        }
        const LibraryRegistry: {
            registerLibrary(_: LibraryRegistry$registerLibrary$0): any;
            listLibraries(): any;
            getLibrary(namespace: any, _?: LibraryRegistry$getLibrary$1): Promise<any>;
            importLibrary(namespaceWithMaybeVersion: any): any;
            registerComponent(Component: any): any;
            getComponentByUu5Tag(uu5Tag: any): any;
        };
        const LoggerFactory: any;
        const Lsi: any;
        interface NestingLevel$getNestingLevel$0 {
            nestingLevel?: any;
        }
        interface NestingLevel$getNestingLevel$1 {
            nestingLevel?: any;
        }
        const NestingLevel: {
            valueList: string[];
            buildList(levelFrom: any, levelTo: any): any;
            getNestingLevel(_: NestingLevel$getNestingLevel$0, __: NestingLevel$getNestingLevel$1): any;
            getChildNestingLevel(props: any, statics: any): any;
            compare(nestingLevel1: any, nestingLevel2: any): any;
        };
        const Object: {
            shallowEqual(objA: any, objB: any): any;
            deepEqual?(objA: any, objB: any): any;
            mergeDeep(...args: any): any;
        };
        const ScreenSize: {
            XS: 480;
            S: 768;
            M: 992;
            L: 1360;
            XL: any;
            countSize(width?: any): any;
            getSize(): any;
            parseValue(value: any): any;
            getSizeValue(sizeOf: any, size: any, sizeList?: string[]): any;
        };
        const String: {
            generateId(length?: number): any;
            format(string: any, ...params: any): any;
            stripAccents(string: any): any;
            capitalize(string: any): any;
        };
        const Style: {
            parse(styleString: any): any;
            parseSpace(value: any, name: any): any;
            getMediaQueries(screenSize: any, styles: any): any;
            getMinMediaQueries(screenSize: any, styles: any): any;
            getMaxMediaQueries(screenSize: any, styles: any): any;
        };
        interface Number$format$1 {
            groupingSeparator?: any;
            decimalSeparator?: any;
        }
        const Number: {
            random(max: any, min?: number): any;
            format(value: any, _: Number$format$1): any;
        };
        const Uu5Loader: any;
        const Uu5Data: any;
        const Uu5Json: any;
        const Uu5String: any;
        const VisualComponent: {
            getAttrs(props: any, defaultClassName: any): any;
            splitProps(props: any, defaultClassName: any): any;
        };
        const Print: {
            registerPrintBlocker(printRequestCallback: any): any;
            unregisterPrintBlocker(id: any): any;
        };
    }
    interface useActiveSubscriber$0 {
        onFocus?: any;
        onBlur?: any;
        onActivation?: any;
    }
    function useActiveSubscriber(_?: useActiveSubscriber$0): any;
    function _useActivePublisher(): any;
    function _useActive(opts: any): any;
    interface _usePortalElement$0 {
        type?: any;
        onCreate?: any;
    }
    function _usePortalElement(_?: _usePortalElement$0): any;
    interface _CollapseAnimationProvider$Props {
        isAnimating?: boolean;
    }
    function _CollapseAnimationProvider(props: _CollapseAnimationProvider$Props): any;
}