/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

const { REGEXP } = require("./uu5-common-tools.js");

const UU5STRING_REGEXP = REGEXP.uu5string;
const UU5JSON_REGEXP = REGEXP.uu5json;
const UU5DATA_REGEXP = REGEXP.uu5data;
const JSCODE_REGEXP = REGEXP.jsCode;
const FORBIDDEN_TAGS_REGEXP =
  /^(applet|base|body|embed|form|frame|frameset|iframe|head|html|link|meta|noframes|object|script|template)$/i;
const FORBIDDEN_TAGS_REGEXP2 = /^(?!uu5string\.[^.]*$).*\.[a-z][^.]*$/; // forbidden, if last tag segment starts with lowercase (for multi-segment tags), except for "uu5string.*", e.g. "uu5string.pre"
const FORBIDDEN_ATTRS_REGEXP = /^(dangerouslySetInnerHTML)$/i;

const COMPONENT_NAME = String.raw`[-\w.]+(_g\d\dv\d+)?`;
const ATTR = String.raw`(\s+)([-\w]+)(?:(\s*=\s*)("(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|([^"'>\s/][^>\s/]*)))?`; // groups: attr separator, attr name, value separator, attr value, indication whether without quotes
const TAG = String.raw`<(${COMPONENT_NAME})((?:${ATTR})*)\s*(/)?>|</(${COMPONENT_NAME})>`; // groups: comp name, comp name suffix, attrs, -, -, -, self-closing, closing tag
const ATTR_REGEXP = new RegExp(ATTR); // groups: see ATTR
const ATTR_VALUE_TYPE_REGEXP = new RegExp(
  String.raw`(${REGEXP.uu5json.source})|(${REGEXP.uu5string.source})|(${REGEXP.uu5data.source})|`
); // groups: uu5json, uu5string, uu5data
const BROKEN_DOUBLE_QUOTED_VALUE = String.raw`("(?:\\.|[^"\\])*)"(?:\\.|[^\\>=])*"`;
const BROKEN_SINGLE_QUOTED_VALUE = String.raw`('(?:\\.|[^'\\])*)'(?:\\.|[^\\>=])*'`;
const BROKEN_ATTR_WITH_QUOTE = String.raw`(\s+[-\w]+\s*=\s*)(?:${BROKEN_DOUBLE_QUOTED_VALUE}|${BROKEN_SINGLE_QUOTED_VALUE})`;
const TAG_WITH_MAYBE_BROKEN_ATTR_WITH_QUOTE = String.raw`(<(${COMPONENT_NAME}))((?:${ATTR}|${BROKEN_ATTR_WITH_QUOTE})*)\s*(/)?>|</(${COMPONENT_NAME})>`;

const TEMPLATE_REG_EXP = new RegExp(REGEXP.uu5stringTemplate.source, "g");
const CHECK_IS_TEMPLATE = new RegExp(`^${REGEXP.uu5stringTemplate.source}$`);

const DEFAULT_SEPARATOR = " ";
const DEFAULT_BOUNDARIES = '"';
const DEFAULT_VALUE_DELIMITER = "=";

// if longer than this, Safari won't parse attribute with such uu5string properly, probably due to regexp buffer limit
const UU5STRING_LENGTH_LIMIT = 950000;

module.exports = {
  UU5STRING_REGEXP,
  UU5JSON_REGEXP,
  UU5DATA_REGEXP,
  JSCODE_REGEXP,
  FORBIDDEN_TAGS_REGEXP,
  FORBIDDEN_TAGS_REGEXP2,
  FORBIDDEN_ATTRS_REGEXP,
  COMPONENT_NAME,
  ATTR,
  TAG,
  BROKEN_ATTR_WITH_QUOTE,
  TAG_WITH_MAYBE_BROKEN_ATTR_WITH_QUOTE,
  ATTR_REGEXP,
  ATTR_VALUE_TYPE_REGEXP,
  TEMPLATE_REG_EXP,
  CHECK_IS_TEMPLATE,
  DEFAULT_SEPARATOR,
  DEFAULT_BOUNDARIES,
  DEFAULT_VALUE_DELIMITER,
  UU5STRING_LENGTH_LIMIT,
};
