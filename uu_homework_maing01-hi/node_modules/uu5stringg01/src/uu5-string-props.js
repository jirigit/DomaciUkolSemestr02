/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

const Uu5StringTools = require("./internal/tools.js");
const Uu5Data = require("./uu5-data.js");
const Uu5StringObject = require("./uu5-string-object");
const defaultFactory = require("./internal/factory.js");
const Constants = require("./internal/constants");

const { DEFAULT_SEPARATOR, DEFAULT_BOUNDARIES, DEFAULT_VALUE_DELIMITER } = Constants;

class Uu5StringProps {
  /* constructor */
  constructor(props, { buildItemFn, uu5DataMap: initialUu5DataMap, allowedTagsRegExp } = {}) {
    this._factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
    /* public methods */
    /*
      Returns props as an array of objects {name, value, separator}.

      @returns array
    */
    this.toArray = () => {
      return this.props;
    };

    /*
      Returns props as a map of name: value

      @returns object
    */
    this.toObject = ({
      uu5DataMap = initialUu5DataMap,
      templateDataMap,
      filterFn,
      preserveValueTypes,
      _extendedResult,
    } = {}) => {
      let resultProps = {};
      let tooLongPropItemMap;
      if (!preserveValueTypes) {
        // returned prop values will have transformed form, e.g. an object (if value type was "uu5json") which
        // means that afterwards it's not possible to figure out whether the original prop was uu5json or uu5string.
        this.props.forEach((item) => {
          let value = item.value;
          if (item.valueType === "uu5data") value = Uu5Data.parse("<uu5data/>" + item.uu5DataKey, uu5DataMap);
          resultProps[item.name] = value;
        });
      } else {
        // returned prop values will be in original form, e.g. a uu5json string instead of parsed json object
        this.props.forEach((item) => {
          resultProps[item.name] =
            // NOTE uu5json is included because it might contain ${expressions} and we must preserve logic that
            // when we send the result of .toObject() into Uu5String constructor and e.g. convert it into JSX,
            // it must work just like when it was in string form, i.e. ${expressions} must get converted (and that
            // will happen only if parser encounters "<uu5json/>...${expressions}", not when it encounters unknown object
            // with "${expressions}" in a value nested somewhere deep).
            item.valueType === "uu5string" || item.valueType === "uu5json" || item.valueType === "uu5data"
              ? Uu5StringProps._renderItemSerializedValue(item, templateDataMap, filterFn)
              : item.value;
          // NOTE Using Constants.UU5STRING_LENGTH_LIMIT instead of direct UU5STRING_LENGTH_LIMIT to be able to override
          // the value in tests.
          if (
            (item.valueType === "uu5string" || item.valueType === "uu5json") &&
            resultProps[item.name].length > Constants.UU5STRING_LENGTH_LIMIT
          ) {
            tooLongPropItemMap ??= {};
            tooLongPropItemMap[item.name] = item;
          }
        });
      }
      return _extendedResult ? { props: resultProps, tooLongPropItemMap } : resultProps;
    };

    this.toChildren = ({ templateDataMap, uu5DataMap = initialUu5DataMap, filterFn, buildChildFn } = {}) => {
      let result = {};
      this.props.forEach(
        (item) =>
          (result[item.name] = Uu5StringProps._renderItemValueToChildren(
            item,
            templateDataMap,
            uu5DataMap,
            filterFn,
            buildChildFn,
            allowedTagsRegExp
          ))
      );
      return result;
    };

    /*
      Returns props as a string with separators.

      @returns string
    */
    this.toString = ({ templateDataMap, filterFn, _extendedResult } = {}) => {
      let propsString = "";
      let tooLongPropItemMap;
      this.props.forEach((item) => {
        if (item.value !== undefined || item.valueType === "uu5data") {
          let transformedPropValue = Uu5StringProps._renderItemValueToString(item, templateDataMap, filterFn);
          let isString = typeof transformedPropValue === "string";
          if (
            isString &&
            (item.valueType === "uu5string" || item.valueType === "uu5json") &&
            transformedPropValue.length > Constants.UU5STRING_LENGTH_LIMIT
          ) {
            tooLongPropItemMap ??= {};
            tooLongPropItemMap[item.name] = item;
          } else {
            let escapedValue;
            let boundaries = "";
            if (isString) {
              // escape prop value
              if (item.valueBoundaries === undefined) {
                boundaries = DEFAULT_BOUNDARIES;
              } else if (item.valueBoundaries) {
                boundaries = item.valueBoundaries;
              }
              // escape content
              if (boundaries === "'") {
                escapedValue = transformedPropValue.replace(/([\\'])/g, "\\$1");
              } else if (boundaries === '"') {
                escapedValue = transformedPropValue.replace(/([\\"])/g, "\\$1");
              } else {
                escapedValue = transformedPropValue;
              }
            } else {
              escapedValue = transformedPropValue;
            }

            let attrValue =
              escapedValue === undefined
                ? ""
                : `${item.valueDelimiter || DEFAULT_VALUE_DELIMITER}${boundaries}${escapedValue}${boundaries}`;

            propsString += `${item.separator || DEFAULT_SEPARATOR}${item.name}${attrValue}`;
          }
        }
      });
      propsString += this.lastSeparator;
      return _extendedResult ? { propsString, tooLongPropItemMap } : propsString;
    };

    /*
      Returns props as a string with separators.

      @returns string
    */
    this.toPlainText = ({ templateDataMap, uu5DataMap, filterFn } = {}) => {
      let result = [];
      this.props.forEach((item) => {
        result.push(Uu5StringProps._renderItemValueToPlainText(item, templateDataMap, uu5DataMap, filterFn));
      });
      return result.join(" ");
    };

    this.clone = ({ initFn } = {}) => {
      let newPropsObject = this._factory.createProps(undefined, { allowedTagsRegExp });
      // set last separator
      newPropsObject.lastSeparator = this.lastSeparator;
      // set all props as a new array
      newPropsObject.props = this.props.map((item) => {
        let newItem = {};
        // clone all attributes
        for (let attr in item) {
          newItem[attr] = item[attr];
        }
        // clone object in value attribute - other attributes has only string values
        if (newItem.value) {
          let isArray = Array.isArray(newItem.value);
          let value = (isArray ? newItem.value : [newItem.value]).map((valueItem) => {
            if (typeof valueItem === "object") {
              // instead of: valueItem instanceof Uu5StringObject
              if (typeof valueItem.clone === "function") {
                return valueItem.clone({ initFn });
              } else {
                return { ...valueItem }; // clone object
              }
            }
            // return other values
            return valueItem;
          });
          newItem.value = isArray ? value : value[0];
        }
        return newItem;
      });
      return newPropsObject;
    };

    // constructor logic
    // parse props string into array of props - each prop have its name, value and separator - props are ordered by its order in string
    this.props = props
      ? typeof props === "string"
        ? Uu5StringProps.parse(props, { buildItemFn, uu5DataMap: initialUu5DataMap, allowedTagsRegExp })
        : Uu5StringProps.parseObject(props, { buildItemFn, uu5DataMap: initialUu5DataMap, allowedTagsRegExp })
      : [];

    this.lastSeparator = props && typeof props === "string" ? props.match(/\s*$/)[0] : "";
  }

  /* static methods */
  static parse(attrsString, { buildItemFn, uu5DataMap, allowedTagsRegExp } = {}) {
    return Uu5StringTools.parseUu5StringProps(attrsString, buildItemFn, uu5DataMap, allowedTagsRegExp);
  }

  static parseObject(attrsString, { buildItemFn, uu5DataMap, allowedTagsRegExp } = {}) {
    return Uu5StringTools.parseUu5StringPropsObject(attrsString, buildItemFn, uu5DataMap, allowedTagsRegExp);
  }

  /* private static methods */
  static _renderItemValueToString(item, templateDataMap, filterFn) {
    let context = Uu5StringTools.getPropTemplateContext(item);
    let result;
    if (item.valueType === "uu5string") {
      result = "<uu5string/>" + Uu5StringTools.contentToString(item.value, templateDataMap, filterFn);
    } else if (item.valueType === "uu5json") {
      result =
        "<uu5json/>" +
        Uu5StringTools.printTemplateToString(JSON.stringify(item.value, undefined, 2), templateDataMap, context);
    } else if (item.valueType === "uu5data") {
      result = "<uu5data/>" + item.uu5DataKey;
    } else if (typeof item.value === "string") {
      result = Uu5StringTools.printTemplateToString(item.value, templateDataMap, context);
    } else if (item.value && typeof item.value === "object") {
      // same as uu5json
      if (Array.isArray(item.value) && item.value.some((elem) => elem instanceof Uu5StringObject)) {
        result = "<uu5string/>";
        item.value.forEach((elem) => (result += elem.toString({ templateDataMap, filterFn })));
      } else {
        result =
          "<uu5json/>" +
          Uu5StringTools.printTemplateToString(JSON.stringify(item.value, undefined, 2), templateDataMap, context);
      }
    } else if (item.value !== true) {
      result = item.value;
    }

    return result;
  }

  /* private static methods */
  static _renderItemValueToPlainText(item, templateDataMap, uu5DataMap, filterFn) {
    if (typeof item.value === "boolean") return "";
    let result;
    if (item.valueType === "uu5string") {
      result = Uu5StringTools.contentToPlainText(item.value, templateDataMap, uu5DataMap, filterFn);
    } else if (item.valueType === "uu5json") {
      result = JSON.stringify(item.value, undefined, 2);
    } else if (typeof item.value === "string") {
      let context = Uu5StringTools.getPropTemplateContext(item);
      result = Uu5StringTools.printTemplateToString(item.value, templateDataMap, context);
    } else {
      result = item.value + "";
    }
    return result;
  }

  static _renderItemValueToChildren(item, templateDataMap, uu5DataMap, filterFn, buildChildFn, allowedTagsRegExp) {
    let context = Uu5StringTools.getPropTemplateContext(item);
    if (item.valueType === "uu5string") {
      return Uu5StringTools.contentToChildren(
        item.value,
        templateDataMap,
        uu5DataMap,
        filterFn,
        buildChildFn,
        allowedTagsRegExp
      );
    } else if (item.valueType === "uu5json") {
      return item.value
        ? JSON.parse(Uu5StringTools.printTemplateToString(JSON.stringify(item.value), templateDataMap, context))
        : {};
    } else if (item.valueType === "uu5data") {
      item.value = Uu5Data.parse("<uu5data/>" + item.uu5DataKey, uu5DataMap);
      return item.value;
    }

    return typeof item.value === "string"
      ? Uu5StringTools.printTemplateToChildren(
          item.value,
          templateDataMap,
          uu5DataMap,
          buildChildFn,
          allowedTagsRegExp,
          context
        )
      : item.value;
  }

  static _renderItemSerializedValue(item, templateDataMap, filterFn) {
    let context = Uu5StringTools.getPropTemplateContext(item);
    let result;
    if (item.valueType === "uu5string") {
      result = "<uu5string/>" + Uu5StringTools.contentToString(item.value, templateDataMap, filterFn);
    } else if (item.valueType === "uu5json") {
      result =
        "<uu5json/>" +
        Uu5StringTools.printTemplateToString(JSON.stringify(item.value, undefined, 2), templateDataMap, context);
    } else if (item.valueType === "uu5data") {
      result = "<uu5data/>" + item.uu5DataKey;
    } else {
      result = item.value !== undefined ? item.value + "" : "";
    }
    return result;
  }
}

module.exports = Uu5StringProps;
