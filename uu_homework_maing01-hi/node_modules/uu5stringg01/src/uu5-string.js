/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

const Uu5StringTools = require("./internal/tools.js");

const Uu5StringObject = require("./uu5-string-object.js");
const Uu5StringProps = require("./uu5-string-props.js");
const { REGEXP } = require("./internal/uu5-common-tools");
const defaultFactory = require("./internal/factory.js");

class Uu5String {
  // TODO to 2.0.0 remove templateDataMap from constructor!
  constructor(uu5string, { templateDataMap, uu5DataMap: initialUu5DataMap, allowedTagsRegExp, initFn = null } = {}) {
    this._factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
    this.templateDataMap = templateDataMap;
    this.initFn = initFn;

    /*
      Transform content of Uu5String into React components. If parameter templateDataMap is undefined, templateDataMap passed into constructor will be used instead.

      @param opts.templateDataMap - map with data for Uu5String templates
      @param filterFn({uu5Tag, props}) - function to change tag and props used for rendering into components. Function is called for each descendant Uu5StringObject before creation of React component. This function cannot change data of Uu5StringObjects.
      @returns array of React components
      */
    this.toChildren = ({
      templateDataMap = this.templateDataMap || {},
      uu5DataMap = initialUu5DataMap,
      filterFn,
      buildChildFn,
    } = {}) => {
      return Uu5StringTools.contentToChildren(
        this.content,
        templateDataMap,
        uu5DataMap,
        filterFn,
        buildChildFn,
        allowedTagsRegExp
      );
    };

    /*
      Transform content into string. If parameter templateDataMap is undefined, templateDataMap passed into constructor will be used instead.

      @param opts.templateDataMap - map with data for Uu5String templates
      @param filterFn({uu5Tag, props}) - function to change tag and props used for printing into string. Function is called for each descendant Uu5StringObject before print into string. This function cannot change data of Uu5StringObjects.
      @returns string
    */
    this.toString = ({ templateDataMap = this.templateDataMap || null, filterFn } = {}) => {
      return Uu5StringTools.contentToString(this.content, templateDataMap, filterFn);
    };

    /*
      Transform content into object. If parameter templateDataMap is undefined, templateDataMap passed into constructor will be used instead.

      @param opts.templateDataMap - map with data for Uu5String templates
      @param filterFn({uu5Tag, props}) - function to change tag and props used for printing into string. Function is called for each descendant Uu5StringObject before print into string. This function cannot change data of Uu5StringObjects.
      @returns string
    */
    this.toObject = ({ templateDataMap = this.templateDataMap || null, filterFn } = {}) => {
      return Uu5StringTools.contentToObject(this.content, templateDataMap, filterFn);
    };

    /*
      Transform content into plain text. Returned string will not contain tags, but only text from their props. If parameter templateDataMap is undefined, templateDataMap passed into constructor will be used instead.

      @param opts.templateDataMap - map with data for Uu5String templates
      @param filterFn({uu5Tag, props}) - function to change props used for printing into plain text. Function is called for each descendant Uu5StringObject before print props into plain text.
      @returns string
    */
    this.toPlainText = ({
      templateDataMap = this.templateDataMap || {},
      uu5DataMap = initialUu5DataMap,
      filterFn,
    } = {}) => {
      return Uu5StringTools.contentToPlainText(this.content, templateDataMap, uu5DataMap, filterFn);
    };

    /*
      Returns new instance of Uu5String. If parameter templateDataMap is undefined, templateDataMap passed into constructor will be used instead.

      @param opts.templateDataMap - data for Uu5StringTemplates
      @returns Uu5String instance.
    */
    this.clone = ({
      templateDataMap = this.templateDataMap,
      uu5DataMap = initialUu5DataMap,
      initFn = this.initFn,
    } = {}) => {
      let result = this._factory.createString(null, { templateDataMap, uu5DataMap });
      if (!this.content) return result;
      result.content = this.content.map((item) => (typeof item === "string" ? item : item.clone({ initFn })));
      return result;
    };

    // constructor logic
    const buildItemFn = (uu5Tag, props, opts) =>
      Uu5StringObject.create(uu5Tag, props, {
        ...opts,
        initFn,
        uu5DataMap: initialUu5DataMap,
        allowedTagsRegExp,
        _factory: this._factory,
      });
    this.content =
      !uu5string || typeof uu5string === "string"
        ? Uu5String.parse(uu5string, {
            buildItemFn,
            uu5DataMap: initialUu5DataMap,
            allowedTagsRegExp,
          })
        : Uu5String.parseTagPropsArray(Array.isArray(uu5string) ? uu5string : [uu5string], {
            buildItemFn,
            uu5DataMap: initialUu5DataMap,
            allowedTagsRegExp,
          });
  }

  /* static functions */
  static parse(uu5string, { buildItemFn, uu5DataMap, allowedTagsRegExp } = {}) {
    if (buildItemFn === undefined) {
      let _factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
      buildItemFn = (uu5Tag, propsString, opts) => Uu5StringObject.create(uu5Tag, propsString, { ...opts, _factory });
    }
    return Uu5StringTools.parseUu5String(uu5string, buildItemFn, uu5DataMap, allowedTagsRegExp);
  }

  static parseTagPropsArray(uu5object, { buildItemFn, uu5DataMap, allowedTagsRegExp } = {}) {
    if (buildItemFn === undefined) {
      let _factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
      buildItemFn = (uu5Tag, props, opts) => Uu5StringObject.create(uu5Tag, props, { ...opts, _factory });
    }
    return Uu5StringTools.parseTagPropsArray(uu5object, buildItemFn, uu5DataMap, allowedTagsRegExp);
  }

  static isValid(uu5string) {
    return Uu5StringTools.isValidUu5String(uu5string);
  }

  static toChildren(uu5string, { templateDataMap, uu5DataMap, filterFn, buildChildFn, allowedTagsRegExp } = {}) {
    let _factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
    return _factory.createString(uu5string, { allowedTagsRegExp }).toChildren({
      templateDataMap,
      uu5DataMap,
      filterFn,
      buildChildFn,
    });
  }

  static toString(uu5string, { templateDataMap, filterFn, allowedTagsRegExp } = {}) {
    let _factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
    return _factory.createString(uu5string, { allowedTagsRegExp }).toString({ templateDataMap, filterFn });
  }

  static toObject(uu5string, { templateDataMap, filterFn, allowedTagsRegExp } = {}) {
    let _factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
    return _factory.createString(uu5string, { allowedTagsRegExp }).toObject({ templateDataMap, filterFn });
  }

  static toPlainText(uu5string, { templateDataMap, uu5DataMap, filterFn, allowedTagsRegExp } = {}) {
    let _factory = (arguments[1] && arguments[1]._factory) || defaultFactory;
    return _factory
      .createString(uu5string, { allowedTagsRegExp })
      .toPlainText({ templateDataMap, uu5DataMap, filterFn });
  }

  static contentToChildren(content, { templateDataMap, uu5DataMap, filterFn, buildChildFn } = {}) {
    return Uu5StringTools.contentToChildren(content, templateDataMap, uu5DataMap, filterFn, buildChildFn);
  }

  static contentToString(content, { templateDataMap, filterFn } = {}) {
    return Uu5StringTools.contentToString(content, templateDataMap, filterFn);
  }

  static contentToObject(content, { templateDataMap, filterFn } = {}) {
    return Uu5StringTools.contentToObject(content, templateDataMap, filterFn);
  }

  static contentToPlainText(content, { templateDataMap, uu5DataMap, filterFn } = {}) {
    return Uu5StringTools.contentToPlainText(content, templateDataMap, uu5DataMap, filterFn);
  }
}

Uu5String.Props = Uu5StringProps;
Uu5String.Object = Uu5StringObject;
Uu5String.REGEXP = {
  uu5string: REGEXP.uu5string,
  uu5json: REGEXP.uu5json,
  uu5data: REGEXP.uu5data,
};

Object.defineProperties(Uu5String, {
  // "private" for uu5g04
  _textEntityMap: {
    get: () => require("./internal/text-entity-map.js"),
  },
});

defaultFactory.init(Uu5String, Uu5StringObject, Uu5StringProps);

module.exports = Uu5String;
