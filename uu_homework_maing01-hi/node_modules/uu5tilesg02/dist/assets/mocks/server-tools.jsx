import { Client as UuAppClient } from "uu_appg01";

const DATA_PAGE_LOAD_DELAY = 1500;

// mock Client for example (the list is actually loaded from binary store, so we'll mock "server-side" paging)
let serverList = null;
let loadedList = [];
const streamToString = (stream, encoding = "utf-8") => {
  return window.TextDecoder
    ? new window.TextDecoder(encoding).decode(stream)
    : decodeURIComponent(escape([...stream].map((char) => String.fromCharCode(char)).join("")));
};
const Client = {
  async get(uri, data) {
    if (!serverList) {
      let response = await UuAppClient.get(uri, { ...data });
      serverList = response.data instanceof Uint8Array ? JSON.parse(streamToString(response.data)) : response.data;
    } else {
      await new Promise((resolve) => setTimeout(resolve, DATA_PAGE_LOAD_DELAY));
      if (navigator.onLine === false) throw new Error("Loading failed - navigator is offline.");
    }

    let { pageIndex = 0, pageSize } = data.pageInfo;
    let itemList = serverList.slice(pageIndex * pageSize, pageIndex * pageSize + pageSize);
    let response = { data: { itemList, pageInfo: { pageIndex, pageSize, total: serverList.length } } };

    let partialList = response.data.itemList;
    let newLoadedList = new Array(response.data.pageInfo.total).fill(undefined);
    let from = response.data.pageInfo.pageIndex * response.data.pageInfo.pageSize;
    let to = from + Math.min(response.data.pageInfo.pageSize, partialList.length);
    for (let i = 0; i < newLoadedList.length; i++) {
      newLoadedList[i] = (from <= i && i < to ? partialList[i - from] : loadedList[i]) || null;
    }
    loadedList = newLoadedList;

    return response;
  },
};

const Calls = {
  async load(dtoIn) {
    let commandUri = Calls.getCommandUri("animal/list");
    let data = await Calls.call("get", commandUri, dtoIn);
    return data;
  },
};

Calls.getCommandUri = () => {
  return "https://uuapp.plus4u.net/uu-bookkit-maing01/5c73a1fdb9a14b4aaff232962752c9b6/getBinaryData?code=basicExampleData";
};
Calls.call = async (method, uri, dtoIn) => {
  if (dtoIn && dtoIn.pageInfo) {
    let { pageIndex = 0, pageSize } = dtoIn.pageInfo;
    console.log("animal/list?pageInfo=" + JSON.stringify({ pageIndex, pageSize }));
  }
  let response = await Client[method](uri, dtoIn);
  return response.data;
};

export { Calls };
