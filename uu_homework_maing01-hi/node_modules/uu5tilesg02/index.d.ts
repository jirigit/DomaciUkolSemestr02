export = Uu5Tiles;
declare namespace Uu5Tiles {
    interface ControllerProvider$Props {
        selectable?: "none" | "single" | "multiple";
        sorterDefinitionList?: any[];
        onSorterChange?(...args: any): any;
        filterDefinitionList?: any[];
        onFilterChange?(...args: any): any;
    }
    function ControllerProvider(props: ControllerProvider$Props): any;
    interface PresetProvider$Props {
        presetList: any[];
        value?: string;
        onChange?(...args: any): any;
        onPresetListChange?(...args: any): any;
        initialPresetValue?: string;
        onInitialPresetValueChange?(...args: any): any;
    }
    function PresetProvider(props: PresetProvider$Props): any;
    namespace PresetProvider {
        interface getMatchingPresetList$1 {
            filterList?: any;
            sorterList?: any;
            serieList?: any;
            view?: any;
        }
        function getMatchingPresetList(presetList?: any[], _?: getMatchingPresetList$1): any;
    }
    interface ViewProvider$Props {
        viewList: any[];
        value?: string;
        onChange?(...args: any): any;
    }
    function ViewProvider(props: ViewProvider$Props): any;
    function useController(): any;
    const usePreset: any;
    const useView: any;
    const _useFilterControls: any;
    const _usePresetControls: any;
    function _useSearch(): any;
    const _useSerieControls: any;
    const _useSorterControls: any;
    function _useUpdateCallback(useOwnCallbackExecution: any): any;
    namespace _Tools {
        const HIDE_SCROLLBARS_CSS: {
            scrollbarWidth: "none";
            "&::-webkit-scrollbar": {
                display: "none";
            };
        };
        const CSS_SIDE_LIST: string[];
        const FROZEN_EMPTY_ARRAY: any;
        const FROZEN_EMPTY_OBJECT: any;
        function isLsiObject(object: any): any;
        function getLsi(lsi: any): any;
        function searchFilter(item: any, searchValue: any): any;
        function normalizeSorterList(sorterList: any): any;
        function normalizeSerieList(serieList: any): any;
        function getActiveFilters(filterDefinitionList: any, filterList: any): any;
        function mergeProps(defaultProps: any, props: any, preferDefaultProps: any): any;
        interface getChildrenToRender$2 {
            preferChildProps?: any;
            cache?: any;
            cacheKey?: any;
        }
        function getChildrenToRender(children: any, propsToPass: any, _?: getChildrenToRender$2): any;
        function constructItemKey(itemIdentifier?: string): any;
        function isValueEmpty(value: any): any;
        interface getPadding$0 {
            padding?: any;
            defaultPadding?: any;
        }
        function getPadding(_: getPadding$0): any;
    }
    const _FilterTools: {
        isValueEmpty(value: any): any;
    };
}