"use strict";

const { DaoFactory } = require("uu_appg01_objectstore");
const { ValidationHelper } = require("uu_appg01_core-appserver");
const { DuplicateKey } = require("uu_appg01_objectstore");
const { Config } = require("uu_appg01_core-utils");

const SysAuditLogAbl = require("./abl/sys-audit-log-abl.js");
const { WARNINGS } = require("./abl/sys-audit-log-abl.js");

class SysAuditLog {

  static async init(uuAppErrorMap) {
    if (DaoFactory.isDataStoreOn()) {
      const dao = require("./abl/sys-audit-log-abl.js").dao;
      const configDao = require("./abl/sys-audit-log-abl.js").configDao;
      await dao.createSchema();
      await configDao.createSchema();

      // create auditLogConfig if it does not exist
      const asid = Config.get("asid");
      let asidConfig = await configDao.getByAwid(asid);
      if (!asidConfig) {
        asidConfig = { awid: asid, latestTransferredLogId: null, latestTransferDate: null, latestTransferState: null };

        try {
          await configDao.create(asidConfig);
        } catch (e) {
          if (e instanceof DuplicateKey) {
            ValidationHelper.addWarning(
              uuAppErrorMap,
              WARNINGS.configRecordCreate.configRecordWasCreated.code,
              WARNINGS.configRecordCreate.configRecordWasCreated.message
            );
          } else {
            throw e
          }
        }
      }
    }
  }

  static getSchemaVersion() {
    return SysAuditLogAbl.getSchemaVersion();
  }

  static async log(severity, logTypeCode, message, logData) {
    return await SysAuditLogAbl.createAuditLogRecord({
      severity,
      logTypeCode,
      message,
      logData
    });
  }

  static async listAuditLogRecordsByTimeAndSpp(awid, dtoIn) {
    return await SysAuditLogAbl.listAuditLogRecordsByTimeAndSpp(awid, dtoIn);
  }

  static async listMyAuditLogRecordsByTime(awid, session, dtoIn) {
    return await SysAuditLogAbl.listMyAuditLogRecordsByTime(awid, session, dtoIn);
  }

  static async deleteAuditLogRecordsBeforeTime(awid, dtoIn) {
    return await SysAuditLogAbl.deleteAuditLogRecordsBeforeTime(awid, dtoIn);
  }
}

module.exports = SysAuditLog;
