"use strict";

const { BaseError, Config } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const CacheConfig = require("./libs/cache-config-loader.js");
const CacheRealizationFactory = require("./libs/cache-realization-factory.js");

// verify that only one version of cache manager is loaded
const { DuplicateLibraryValidator } = require("uu_appg01_core-utils");
DuplicateLibraryValidator.ensureSingleVersion(module);

const logger = LoggerFactory.get("uu_app_cache.cache-manager");

class CacheManager {
  constructor() {
    this._caches = new Map();
    this._config = null;
    this.reload();
  }

  /**
   * Reloads cache caches from configuration and initializes them.
   */
  reload() {
    CacheRealizationFactory.reload();
    this._caches = new Map();
    let cacheList = Object.keys(CacheConfig.config.caches);
    cacheList.forEach((code) => this.createCache(code));
  }

  /**
   * Gets an instantiated cache specified by code.
   * @param {string} code - cache code
   * @returns {CacheRealization}
   */
  getCache(code) {
    if (!code) {
      throw new BaseError("No cache specified.");
    }
    if (!this._caches.has(code)) {
      throw new BaseError(`Cache ${code} does not exist.`);
    }
    return this._caches.get(code);
  }

  /**
   * Creates a new cache specified by code.
   * @param {string} code - cache code
   * @param {object} config - cache configuration
   * @returns {CacheRealization}
   */
  createCache(code, config = {}) {
    if (!code) {
      throw new BaseError("No cache specified.");
    }
    if (this._caches.has(code)) {
      throw new BaseError(`Cache ${code} already exists.`);
    }
    const cache = CacheRealizationFactory.create(code, config);
    this._caches.set(code, cache);
    return cache;
  }

  listCaches() {
    return this._caches.keys();
  }
}

module.exports = new CacheManager();
