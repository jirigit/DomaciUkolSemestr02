"use strict";

const { LoggerFactory } = require("uu_appg01_core-logging");
const { Config, Finder, BaseError } = require("uu_appg01_core-utils");

const logger = LoggerFactory.get("UuApp.Cache.RealizationLoader", true);

const NestedMap = require("../modules/memcache/nested-map.js");

const LruCacheRealization = require("../modules/cache/lru-memcache-cache-realization.js");
const DisabledCacheRealization = require("../modules/cache/disabled-cache-realization.js");

// Cache realizations that are always available.
const ENFORCED_CACHE_REALIZATIONS = [LruCacheRealization, DisabledCacheRealization];

const AutoloadingCacheHandler = require("../modules/cache/autoloading-cache-handler");
const MonitoredCacheHandler = require("../modules/cache/monitored-cache-handler");

// Cache handlers that are always available.
const ENFORCED_CACHE_HANDLERS = [AutoloadingCacheHandler, MonitoredCacheHandler];

const CACHE_REALIZATION_GLOB_PATTERN = "{app,src}/modules/cache/*cache-realization.js";
const CACHE_HANDLER_GLOB_PATTERN = "{app,src}/modules/cache/*cache-handler.js";
const PATH_SYMBOL = Symbol("path");

/**
 * Loads cache realizations in app and libs folders.
 */
class CacheRealizationLoader {
  constructor() {
    /**
     * @type {NestedMap<string, string, CacheRealization>} realization name, realization policy to realization map
     */
    this._cacheRealizationMap = null;
    /**
     * @type {Map<string, CacheHandler>} hanlder name to handler map
     */
    this._cacheHandlerMap = null;
  }

  /**
   * Returns a map of cache realizations by their names.
   * @returns {NestedMap<string, CacheRealization>}
   */
  getCacheRealizations() {
    if (!this._cacheRealizationMap) {
      this.reloadRealizations();
    }
    return this._cacheRealizationMap;
  }

  /**
   * Reloads cache realizations from app and libs folders.
   * @returns {Map<string, CacheRealization>}
   */
  reloadRealizations() {
    this._cacheRealizationMap = new NestedMap("uu_app_cache_realization_map");
    const root = Config.get("server_root") || process.cwd();
    const cacheRealizationPaths = Finder.findInProject(root, CACHE_REALIZATION_GLOB_PATTERN).concat(
      Finder.findInModules(root, CACHE_REALIZATION_GLOB_PATTERN)
    );
    cacheRealizationPaths.forEach((path) => {
      const cacheRealization = require(path);
      cacheRealization[PATH_SYMBOL] = path;
      if (typeof cacheRealization.REALIZATION_NAME !== "string") {
        logger.warn(`Cache realization '${path}' has no name attribute, it will be ignored.`);
        return;
      }
      if (typeof cacheRealization.REALIZATION_POLICY !== "string") {
        logger.warn(`Cache realization '${path}' has no policy attribute, it will be ignored.`);
        return;
      }
      if (this._cacheRealizationMap.has(cacheRealization.REALIZATION_NAME, cacheRealization.REALIZATION_POLICY)) {
        logger.error(
          `Cache realization '${path}' has the same name '${cacheRealization.REALIZATION_NAME}' and policy '${
            cacheRealization.REALIZATION_POLICY
          }' as '${this._cacheRealizationMap.get(cacheRealization.REALIZATION_NAME)[PATH_SYMBOL]}', it will be ignored.`
        );
        return;
      }
      this._cacheRealizationMap.set(
        cacheRealization.REALIZATION_NAME,
        cacheRealization.REALIZATION_POLICY,
        cacheRealization
      );
    });

    // ensure native lru and disabled cache realizations
    ENFORCED_CACHE_REALIZATIONS.filter(
      (realization) => !this._cacheRealizationMap.has(realization.REALIZATION_NAME, realization.REALIZATION_POLICY)
    ).forEach((realization) => {
      this._cacheRealizationMap.set(realization.REALIZATION_NAME, realization.REALIZATION_POLICY, realization);
    });

    return this._cacheRealizationMap;
  }

  /**
   * Gets cache realization by its name.
   * @param {string} name - realization name
   * @param {string} policy - realization policy
   * @returns {CacheRealization}
   */
  getCacheRealization(name, policy) {
    if (!this._cacheRealizationMap.has(name, policy)) {
      throw new BaseError(`Cache realization '${name}' not found.`);
    }
    return this._cacheRealizationMap.get(name, policy);
  }

  getCacheHandlers() {
    if (!this._cacheHandlerMap) {
      this.reloadCacheHandlers();
    }
    return this._cacheHandlerMap;
  }

  reloadCacheHandlers() {
    this._cacheHandlerMap = new Map();
    const root = Config.get("server_root") || process.cwd();
    const cacheHandlerPaths = Finder.findInProject(root, CACHE_HANDLER_GLOB_PATTERN).concat(
      Finder.findInModules(root, CACHE_HANDLER_GLOB_PATTERN)
    );
    cacheHandlerPaths.forEach((path) => {
      const cacheHandler = require(path);
      cacheHandler[PATH_SYMBOL] = path;
      if (typeof cacheHandler.HANDLER_NAME !== "string") {
        logger.warn(`Cache handler '${path}' has no name attribute, it will be ignored.`);
        return;
      }

      if (this._cacheHandlerMap.has(cacheHandler.HANDLER_NAME)) {
        logger.error(
          `Cache handler '${path}' has the same name '${cacheHandler.HANDLER_NAME}' as '${
            this._cacheHandlerMap.get(cacheHandler.HANDLER_NAME)[PATH_SYMBOL]
          }', it will be ignored.`
        );
        return;
      }
      this._cacheHandlerMap.set(cacheHandler.HANDLER_NAME, cacheHandler);
    });

    ENFORCED_CACHE_HANDLERS.filter((handler) => !this._cacheHandlerMap.has(handler.HANDLER_NAME)).forEach((handler) => {
      this._cacheHandlerMap.set(handler.HANDLER_NAME, handler);
    });

    return this._cacheHandlerMap;
  }

  getCacheHandler(name) {
    if (!this._cacheHandlerMap) {
      this.reloadCacheHandlers();
    }
    if (!this._cacheHandlerMap.has(name)) {
      throw new BaseError(`Cache handler '${name}' not found.`);
    }
    return this._cacheHandlerMap.get(name);
  }

  get _realizationMap() {
    if (!this._cacheRealizationMap) {
      this.reloadRealizations();
    }
    return this._cacheRealizationMap;
  }

  get _handlerMap() {
    if (!this._cacheHandlerMap) {
      this.reloadCacheHandlers();
    }
    return this._cacheHandlerMap;
  }
}

module.exports = new CacheRealizationLoader();
