"use strict";

const ApplicationError = require("../error/application-error.js");
const SystemError = require("../error/system-error.js");
const { LoggerFactory } = require("uu_appg01_core-logging");

/**
 * Interceptor for extracting error information from response.
 */
class RemoteErrorHandler {
  constructor(next, options = null) {
    this._next = next;
    this._logger = LoggerFactory.get("UuApp.AppClient.Interceptor.RemoteErrorHandler");
  }

  async invoke(request, options = null) {
    // NOTE We assume that the "content-type" transformation has been already performed on response data.
    let response = await this._next.invoke(request, options);

    if (response.status < 400){
      this._logger.info(`Request ${request.uri} ended with status code: ${response.status}`);
    }

    if (response.status >= 400) {
      let errorData = response.data || {};
      if (response.status < 500) {
        this._logger.warn(`Request ${request.uri} ended with status code: ${response.status}${this._addUuAppErrorMap(response)}`);
        throw new ApplicationError(errorData, response);
      } else {
        this._logger.error(`Request ${request.uri} failed with status code: ${response.status}${this._addUuAppErrorMap(response)}`);
        throw new SystemError(errorData, response);
      }
    }
    return response;
  }

  _addUuAppErrorMap(response){
    if (!response.data.uuAppErrorMap){
      return "";
    }

    let errorCode = Object.keys(response.data.uuAppErrorMap)[0];
    let foundError = response.data.uuAppErrorMap[errorCode];
    let optionalMessage = `, uuAppErrorMap code: ${errorCode}, message: ${foundError.message}`;

    if (foundError.paramMap){
      optionalMessage += `, paramMap: ${JSON.stringify(foundError.paramMap)}`;
    }
    return optionalMessage;
  }
}

module.exports = RemoteErrorHandler;
