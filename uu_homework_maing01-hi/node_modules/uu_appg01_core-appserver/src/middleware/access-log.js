"use strict";

const Logger = require("../monitoring/access-log.js");
const Morgan = require("morgan");

const MIDDLEWARE_ORDER = -600;

const stream = {
  write: function(message, encoding) {
    // Message is logged via "formatter"
    // represented by access log itself.
  }
};

const indexOfHeadersEnd = function(buffer, offset = 0) {
  // End of headers is delimited by "\r\n\r\n"
  if (offset > buffer.length) {
    return -1;
  }
  let idx = buffer.indexOf("\r", offset);
  if (idx === -1) {
    return -1;
  }
  let idxNext = buffer.indexOf("\n", idx + 1);
  if (idxNext === -1 || idxNext > idx + 1) {
    return indexOfHeadersEnd(buffer, idx + 1);
  }
  idx = idxNext;
  idxNext = buffer.indexOf("\r", idx + 1);
  if (idxNext === -1 || idxNext > idx + 1) {
    return indexOfHeadersEnd(buffer, idx + 1);
  }
  idx = idxNext;
  idxNext = buffer.indexOf("\n", idx + 1);
  if (idxNext === -1 || idxNext > idx + 1) {
    return indexOfHeadersEnd(buffer, idx + 1);
  }
  return idxNext + 1;
}

/**
 * AccessLog uses Morgan, an Express recommended request logger.
 */
class AccessLog {

  constructor() {
    this.order = MIDDLEWARE_ORDER;
  }

  /**
   * Getter that returns Express compliant middleware function.
   * @returns {Function}
   */
  get pre() {
    let morganLoggerFn = Morgan(Logger.log, { stream });
    // Workaround for counting response body size as Morgan is not
    // able to provide body size if content-length header is not used.
    return function morganWrapper (req, res, next) {
      res.responseBodySize = 0;
      let headersBuffer = Buffer.alloc(0);
      let headersWritten = false;
      let origWrite = res.socket.write.bind(res.socket);
      // Wrap socket write function to be able to count all data
      // physically written to socket (and thus to count exact
      // response body size transferred via network)
      res.socket.write = function(data, encoding, callback) {
        if (data) {
          if (headersWritten) {
            // If headers were written, just append chunk length
            // as chunk represents only body.
            res.responseBodySize += data.length;
          } else {
            // We need to check for headers as we need to count only body size
            headersBuffer = Buffer.concat([headersBuffer, Buffer.from(data)]);
            let idx = indexOfHeadersEnd(headersBuffer);
            if (idx > -1) {
              headersWritten = true;
              // Count only part of buffer which represents body
              res.responseBodySize += headersBuffer.subarray(idx).length;
            }
          }
        }
        return origWrite(data, encoding, callback);
      };
      return morganLoggerFn(req, res, next);
    }
  }
}

/**
 * Module exports AccessLog constructor.
 * @type {AccessLog}
 */
module.exports = AccessLog;
