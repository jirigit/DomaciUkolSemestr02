"use strict";

const GlobalStore = require("./global-store.js");
const BaseError = require("./base-error.js");

/**
 * ThreadLocal alike context store.
 */
class ContextStore {

  /**
   * Creates new context store
   * @param ctxName Context store name.
   * @param fn Function to which should context store be bound.
   * @returns {*} Return value of invoked function.
   */
  static create(ctxName, fn) {
    let contextStores = GlobalStore.get("uuAppContextStores");
    let contextStore = contextStores.get(ctxName);
    if (contextStore) {
      throw new BaseError(`Context "${ctxName}" is already created.`);
    }
    contextStore = new ContextStore();
    contextStores.set(ctxName, contextStore);
    return fn();
  }

  /**
   * Returns context store bound to current context.
   * @param ctxName Context store name.
   * @returns {ContextStore|null} Instance of context store or null.
   */
  static get(ctxName) {
    let contextStores = GlobalStore.get("uuAppContextStores");
    return contextStores.get(ctxName) || null;
  }

  /**
   * Creates new instance of context store.
   * @private
   */
  constructor() {
    this._attributes = {};
  }

  /**
   * Stores context attribute.
   * @param key Context attribute name.
   * @param value Context attribute value.
   */
  set(key, value) {
    this._attributes[key] = value;
  }

  /**
   * Returns context attribute.
   * @param key Context attribute name.
   * @returns {*} Context attribute value.
   */
  get(key) {
    return this._attributes[key];
  }

  /**
   * Deletes context attribute.
   * @param key Context attribute name.
   */
  delete(key) {
    delete this._attributes[key];
  }

  /**
   * Binds context store to emitter object. This is necessary to ensure context
   * is visible inside methods invoked by emitter events (like "on data" etc.).
   * @param emitter Emitter object (e.g. stream, socket, etc.)
   */
  bind(emitter) {
    // Nothing to do in browser environment.
  }

  /**
   * @deprecated Use {@link bind}.
   */
  bindEmitter(emitter) {
    this.bind(emitter);
  }

  /**
   * Forks context and runs given function.
   * @param fn Function to which should forked context store be bound.
   * @returns {*} Return value of invoked function.
   */
  fork(fn) {
    return fn();
  }

}

module.exports = ContextStore;
