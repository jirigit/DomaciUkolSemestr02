"use strict";

const POLLUTION_CHECK = /"(((_|\\u005f)(_|\\u005f)(p|\\u0070)(r|\\u0072)(o|\\u006f)(t|\\u0074)(o|\\u006f)(_|\\u005f)(_|\\u005f))|((c|\\u0063)(o|\\u006[Ff])(n|\\u006[Ee])(s|\\u0073)(t|\\u0074)(r|\\u0072)(u|\\u0075)(c|\\u0063)(t|\\u0074)(o|\\u006[Ff])(r|\\u0072)))"/;
const PROTO_KEY = "__proto__";
const CONSTRUCTOR_KEY = "constructor";

const BOOLEAN_TYPE = "boolean";
const OBJECT_TYPE = "object";
const PRUNED_VALUE = "-pruned-";

class Json {

  static parse(text, secure = true) {
    if (secure && POLLUTION_CHECK.test(text)) {
      return JSON.parse(text, (key, value) => key !== PROTO_KEY && key !== CONSTRUCTOR_KEY ? value : undefined);
    } else {
      return JSON.parse(text);
    }
  }

  static stringify(value, opts = {}) {
    if (typeof opts === BOOLEAN_TYPE) {
      opts = {prettyPrint: opts};
    }

    let pruner;
    if (opts && opts.prune) {
      let seen = [];
      pruner = (key, value) => {
        if (!value || typeof value !== OBJECT_TYPE) {
          return value;
        } else if (seen.indexOf(value) !== -1) {
          return PRUNED_VALUE;
        } else {
          seen.push(value);
          return value;
        }
      };
    }

    if (opts && opts.prettyPrint) {
      return JSON.stringify(value, pruner, 2);
    } else {
      return JSON.stringify(value, pruner);
    }
  }

}

module.exports = Json;
