"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _Constant extends Matcher {
  constructor(...params) {
    super("constant", ...params);
  }

  processParams(...params) {
    if (params.length === 1) {
      this.constValue = params[0];
      if (
        typeof this.constValue !== "string" &&
        typeof this.constValue !== "number" &&
        typeof this.constValue !== "boolean" &&
        !(this.constValue instanceof Date) &&
        this.constValue !== null &&
        !this._isEmptyObject(this.constValue)
      ) {
        throw new MatcherError(
          "Constant: invalid parameter0, expected String, Number, Boolean, Date, Null or Empty Object {}"
        );
      }
    } else if (params.length > 1) {
      throw new MatcherError("Constant: wrong number of parameters, expected 0..1");
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value === undefined) {
      return result;
    }

    // TODO Optimize...
    // TODO JR: Yes please, it is not very efficient
    if (this.constValue !== undefined) {
      if (typeof this.constValue === "string") {
        //string or date
        if (this._isDate(this.constValue)) {
          this._checkForDate(result, this.constValue, value); //#1
        } else {
          if (this.constValue !== value) {
            if (typeof value === "string") {
              result.addInvalidValueError("constant.e002", `The value must match the string ${this.constValue}.`);
            } else {
              result.addInvalidTypeError("constant.e001", `The value must be string.`);
            }
          }
        }
      } else if (typeof this.constValue === "number") {
        //only number is number
        if (this.constValue !== value) {
          if (typeof value === "number") {
            result.addInvalidValueError("constant.e002", `The value must match the number ${this.constValue}.`);
          } else {
            result.addInvalidTypeError("constant.e001", `The value must be number.`);
          }
        }
      } else if (this.constValue instanceof Date) {
        //only date
        this._checkForDate(result, this.constValue, value);
      } else if (this._isEmptyObject(this.constValue)) {
        if (!this._isEmptyObject(value)) {
          result.addInvalidValueError("constant.e002", `The value must be an empty object {}.`);
        }
      } else if (this.constValue === null) {
        if (this.constValue !== value) {
          result.addInvalidValueError("constant.e002", `The value must be null.`);
        }
      } else {
        if (this.constValue !== value) {
          if (typeof this.constValue === typeof value) {
            result.addInvalidValueError(
              "constant.e002",
              `The value must match the ${typeof this.constValue} ${this.constValue}.`
            );
          } else {
            result.addInvalidTypeError("constant.e001", `The value must be ${typeof this.constValue}.`);
          }
        }
      }
    }

    return result;
  }

  _checkForDate(result, constValue, value) {
    let val = value;
    let constVal = constValue;
    if (this._isDate(constValue)) {
      //constant must be date
      if (this._isDate(value)) {
        //is value date
        if (!(value instanceof Date)) {
          val = new Date(value);
        }
        if (!(constValue instanceof Date)) {
          constVal = new Date(constValue);
        }
        if (val.getTime() !== constVal.getTime()) {
          result.addInvalidValueError(
            "constant.e002",
            `The value must match the date ${new Date(constValue).toISOString()}.`
          );
        }
      } else {
        result.addInvalidTypeError("constant.e001", `The value must be date.`);
      }
    }
  }

  _isDate(date) {
    // TODO JR: this will need some optimization in matcher initialization
    return !!(function (d) {
      return d !== "Invalid Date" && !isNaN(d);
    })(new Date(date));
  }

  _isEmptyObject(obj) {
    // TODO JR: this will need some optimization in matcher initialization
    if (typeof obj === "undefined" || obj === null) {
      return false;
    }
    return Object.keys(obj).length === 0 && Object.getPrototypeOf(obj) === Object.prototype;
  }
}

function Constant(...params) {
  let matcher = new _Constant(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Constant;
