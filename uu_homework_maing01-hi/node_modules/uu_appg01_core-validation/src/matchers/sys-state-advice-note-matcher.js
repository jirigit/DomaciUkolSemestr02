"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");

const SYS_StATE_ADVICE_NOTE_TYPE = `const sysStateAdviceNoteType = shape({
  message: uu5String(),
  severity: oneOf(["debug", "info", "warning", "error", "fatal"]),
  uuIdentity: uuIdentity(),
  startTime: dateTime(),
  estimatedEndTime: datetime()
});`;

class _SysStateAdviceNote extends Matcher {

  constructor(...params) {
    super("sysStateAdviceNote", ...params);
    this.validator = new Validator(SYS_StATE_ADVICE_NOTE_TYPE);
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == null) {
      return result;
    }

    let childResult = this.validator.validate("sysStateAdviceNoteType", value);
    if (!childResult.isValid()) {
      result.addInvalidValueError("sysStateAdviceNote.e001", `The value must be sysStateAdviceNoteType.`);
      Object.keys(childResult.childResults).forEach(childResultKey => {
        result.addChildResult(childResultKey, childResult.childResults[childResultKey]);
      })
    }

    return result;
  }

}

function SysStateAdviceNote(...params) {
  let matcher = new _SysStateAdviceNote(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = SysStateAdviceNote;
