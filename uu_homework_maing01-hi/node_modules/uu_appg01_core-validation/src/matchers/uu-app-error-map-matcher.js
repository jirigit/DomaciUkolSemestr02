"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");

const TYPE_NAME = "uuAppErrorMap";
const MAX_NESTING_LEVEL = 32;
const CODE_TYPE_NAME = `${TYPE_NAME}Code`;
const ATTRIBUTES_TYPE_NAME = `${TYPE_NAME}Attributes`;

const CODE_SCHEME = `const ${CODE_TYPE_NAME} = string();`;
const ATTRIBUTES_SCHEME = `const ${ATTRIBUTES_TYPE_NAME} = shape({
  id: string(),
  timestamp: datetime(),
  type: oneOf("warning", "error"),
  message: string(),
  paramMap: map(string(), any()),
  cause: any(),
  trace: string()
});`;

class _UuAppErrorMap extends Matcher {

  constructor(...params) {
    super(TYPE_NAME, ...params);
    this.codeValidator = new Validator(CODE_SCHEME);
    this.attributesValidator = new Validator(ATTRIBUTES_SCHEME);
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == null) {
      return result;
    }

    if (ctx.nestingLevel && ctx.nestingLevel >= MAX_NESTING_LEVEL) {
      result.addInvalidValueError(TYPE_NAME + ".e002", `The validated value is incorrect. The validation nesting level (${ctx.nestingLevel}) is too high.`);
      return result;
    }

    if (typeof value !== "object" || (Object.prototype.toString.call(value) !== "[object Object]" && Object.prototype.toString.call(value) !== "[object Map]")) {
      result.addInvalidTypeError(TYPE_NAME + ".e001", "The value must be uuAppErrorMap.");
    } else {
      Object.keys(value).forEach(code => {
        let attributes = value[code];

        let codeResult = this.codeValidator.validate(CODE_TYPE_NAME, code);
        if (!codeResult.isValid()) {
          result.addChildResult(code, codeResult);
          result.addInvalidValueError(TYPE_NAME + ".e003", "The error code must be valid.");
        }

        let attrsResult = this.attributesValidator.validate(ATTRIBUTES_TYPE_NAME, attributes);
        if (!attrsResult.isValid()) {
          result.addChildResult(code, attrsResult);
          result.addInvalidValueError(TYPE_NAME + ".e004", "The app error attributes are not valid.");
        }

        if (attributes.cause) {
          let newCtx = { ...ctx };
          newCtx["parentValue"] = value;
          newCtx["nestingLevel"] = ctx.nestingLevel == undefined ? 0 : (ctx.nestingLevel + 1);

          let innerResult = this.match(attributes.cause, newCtx);
          if (!innerResult.isValid()) {
            let auxResult = new ValidationResult();
            auxResult.addChildResult("cause", innerResult);
            auxResult.addInvalidValueError(TYPE_NAME + ".e001", "The value must be uuAppErrorMap.");

            result.addChildResult(code, auxResult);
            result.addInvalidValueError(TYPE_NAME + ".e004", "The app error attributes are not valid.");
          }
        }
      });
    }

    return result;
  }

}

function UuAppErrorMap(...params) {
  let matcher = new _UuAppErrorMap(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = UuAppErrorMap;
