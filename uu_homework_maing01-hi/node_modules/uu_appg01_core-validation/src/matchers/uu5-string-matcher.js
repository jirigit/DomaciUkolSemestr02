"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _Uu5String extends Matcher {
  constructor(...params) {
    super("uu5String", ...params);
  }

  processParams(...params) {
    if (params.length === 1) {
      this.maxLength = params[0];
      if (typeof this.maxLength !== "number") {
        throw new MatcherError("Uu5String: invalid parameter0, expected Number");
      }
    } else if (params.length === 2) {
      this.minLength = params[0];
      this.maxLength = params[1];
      if (typeof this.minLength !== "number") {
        throw new MatcherError(`Uu5String: invalid parameter0, expected Number`);
      }
      if (typeof this.maxLength !== "number") {
        throw new MatcherError(`Uu5String: invalid parameter1, expected Number`);
      }
    } else if (params.length > 2) {
      throw new MatcherError("Uu5String: wrong number of parameters, expected 0..2");
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if (typeof value === "string" || value instanceof String) {
      let prefixLength = 0;
      if (value.indexOf("<uu5string/>") !== -1) {
        prefixLength = "<uu5string/>".length;
      }
      if (this.minLength != null && value.length - prefixLength < this.minLength) {
        result.addInvalidValueError("uu5String.e003", `The value must be longer than ${this.minLength} character.`);
      }
      if (this.maxLength != null && value.length - prefixLength > this.maxLength) {
        result.addInvalidValueError(
          "uu5String.e002",
          `The value must not be longer than ${this.maxLength} characters.`
        );
      }
    } else {
      result.addInvalidTypeError("uu5String.e001", "The value must be uu5String.");
    }

    return result;
  }
}

function Uu5String(...params) {
  let matcher = new _Uu5String(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Uu5String;
