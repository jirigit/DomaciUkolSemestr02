const fs = require("fs-extra");
const path = require("path");

const upgradeVersion = __filename.replace(/.*upgrade-(.*)\.js$/, "$1");

const DEFAULT_MAPPINGS_JSON = {
  "{vendor}-{uuApp}-{uuSubApp}": {
    useCaseMap: {
      defaultVuc: {
        realization: "index.html",
        httpMethod: "GET",
        type: "VUC",
      },
    },
  },
};

module.exports = async function (config, templateInfo) {
  let { type } = templateInfo;

  if (type === "uu5-app") {
    console.log(`${upgradeVersion} Updating default font in *.html of UVEs to uuGDS font.`);
    let uveHtmlFiles = getUveHtmlFiles();
    for (let htmlFile of uveHtmlFiles) {
      let content = fs.readFileSync(htmlFile, "utf-8");
      content = content.replace(
        /(<link\s+[^>]*?['"])https:\/\/cdn\.plus4u\.net\/libs\/clearsans\/[^"']*/g,
        (m, g) => g + "https://cdn.plus4u.net/uu-gdsg01/0.0.0/assets/font.min.css"
      );
      content = content
        .replace(
          /(<body\b[^>]*?\bclass="[^"]*?)(?<=\s|")clear-sans(?=\s|")([^>]*)/,
          (m, g1, g2) => g1 + "uu-gdsg01-unicorn" + g2
        )
        .replace(/<body\s*>/g, '<body class="uu-gdsg01-unicorn">');
      fs.writeFileSync(htmlFile, content, "utf-8");
    }
  }
};

function getUveHtmlFiles() {
  let mappingsJson = getMappingsJson();
  let srcPath = "src";

  let resultSet = new Set();
  if (mappingsJson) {
    for (let k in mappingsJson) {
      // iterate over UCs in the mappings.json and pick those which are VUC and end with .html (or .htm)
      let ucMap = (mappingsJson[k] || {})["useCaseMap"] || {};
      Object.keys(ucMap)
        .filter(
          (uc) =>
            (ucMap[uc].type === "VUC" || ucMap[uc].type === "UVE") && (ucMap[uc].realization || "").match(/\.html?$/i)
        )
        .map((uc) => ucMap[uc].realization.replace(/^\/+/, ""))
        .forEach((htmlFile) => resultSet.add(htmlFile));
    }
  }
  let filesInSrc = fs.readdirSync(srcPath, { withFileTypes: true });
  filesInSrc.filter((item) => item.name.match(/\.html?$/) && item.isFile()).forEach((item) => resultSet.add(item.name));
  return [...resultSet].map((it) => path.join(srcPath, it));
}

function getMappingsJson() {
  let serverDirName = path.basename(process.cwd()).replace(/-(client|hi)/, "-server"); // "xyz-hi" => "xyz-server"; "xyz-client" => "xyz-server"

  let filePath = `../${serverDirName}/app/config/mappings.json`;
  if (!fs.existsSync(filePath)) filePath = "config/mappings.json";
  if (!fs.existsSync(filePath)) return DEFAULT_MAPPINGS_JSON;
  let mappingsJson = fs.readFileSync(filePath, "utf-8");
  return mappingsJson ? JSON.parse(mappingsJson) : {};
}
