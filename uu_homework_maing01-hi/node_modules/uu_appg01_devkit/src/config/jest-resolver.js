const fs = require("fs");
const path = require("path");

const paths = require("./paths.js");
const helpers = require("../tools/helpers.js");

let aliasesByProjectMap = {};
let parentFolderAbsPath = path.dirname(process.cwd());
let checkBrowserFiles = helpers.getTemplateInfo().type === "lib";

let uu5g04Dir;
function getUu5g04Dir() {
  if (uu5g04Dir === undefined) {
    let uu5g04Pkg = findNodeModule("uu5g04/package.json", { basedir: path.resolve(".") });
    uu5g04Dir = uu5g04Pkg ? path.dirname(uu5g04Pkg) : null;
  }
  return uu5g04Dir;
}

// https://facebook.github.io/jest/docs/en/configuration.html#resolver-string
module.exports = function (name, options) {
  let aliases;
  if (options.basedir.startsWith(parentFolderAbsPath + path.sep)) {
    let relatedProjectFolder = options.basedir
      .slice(parentFolderAbsPath.length + path.sep.length)
      .replace(/[/\\].*/, "");
    aliases = aliasesByProjectMap[relatedProjectFolder];
    if (aliases === undefined && relatedProjectFolder !== "node_modules") {
      // NOTE In multi-lib workspaces we might be running test in e.g. uu_plus4u5g02-elements/ which
      // imports uu_plus4u5g02 from sibling folder uu_plus4u5g02/ which tries to import e.g. "calls"
      // which should be an alias to uu_plus4u5g02/src/calls.js (not to uu_plus4u5g02-elements/src/calls.js).
      // So because we're in uu_plus4u5g02-elements, we might not know aliases used by uu_plus4u5g02 yet,
      // so we need to figure them out.
      // TODO The initialization of aliases is duplicit with what is in src/scripts/test.js :-/.
      let aliasesFile = path.join("..", relatedProjectFolder, paths.buildDir, "jest-webpack-aliases.json");
      if (!fs.existsSync(aliasesFile)) initAliasesFileInAnotherProject(relatedProjectFolder);
      if (fs.existsSync(aliasesFile)) {
        let aliasesStr = fs.readFileSync(aliasesFile, "utf-8");
        aliases = JSON.parse(aliasesStr);
      } else {
        aliases = {};
      }
      aliasesByProjectMap[relatedProjectFolder] = aliases;
    }
  }

  // handle webpack aliases in source files of this library / app
  if (aliases && aliases[name] && !options.basedir.match(/node_modules/)) {
    if (path.isAbsolute(aliases[name]) || aliases[name].match(/^\.\.?[/\\]/)) {
      return aliases[name];
    } else {
      name = aliases[name]; // module-mapped name, e.g. in uu5g05: "uu5stringg01" => "uu5stringg01/dist/uu5stringg01.js"
    }
  }

  // use identity-obj-proxy module for CSS & Less files (in case something is using CSS Modules)
  if (name.match(/\.(css|less)$/)) return require.resolve("identity-obj-proxy");

  // try standard then fallback to using resolved soft/hard links (jest resolver doesn't count
  // with them and they're used when using pnpm) and try jest resolver again
  let result = tryResolve(name, options);
  if (!result) {
    options.basedir = toRealPath(options.basedir);
    options.paths = options.paths && options.paths.map((it) => toRealPath(it));
    result = tryResolve(name, options);
  }
  return result;
};

function toRealPath(pth) {
  if (fs.existsSync(pth)) return fs.realpathSync(pth);
  return pth;
}

function tryResolve(name, options) {
  let result;

  // use .browser.js file if available
  if (checkBrowserFiles && name.startsWith(".")) {
    let browserName = path.dirname(name) + "/" + name.replace(/(\.js)?$/, ".browser.js");
    result = findNodeModule(browserName, options);
  }

  // fallback to default jest resolver
  if (!result) {
    result = findNodeModule(name, options);

    // fallback to resolving against uu_appg01_devkit node_modules (required for enzyme)
    if (!result) {
      let uu5ScriptsBaseDir = path.resolve(__dirname, "..", "..");
      result = findNodeModule(name, Object.assign({}, options, { basedir: uu5ScriptsBaseDir }));

      // fallback to resolving against current directory - this is needed when project
      // uses relative FS path to uu_appg01_devkit (importing React in jest-setup.js would fail otherwise)
      if (!result) {
        let curDir = path.resolve(".");
        if (!options || options.basedir !== curDir) {
          result = findNodeModule(name, Object.assign({}, options, { basedir: curDir }));

          // in case of react & other basic ones fallback to resolving against uu5g04 module
          // ("react" is imported from "enzyme" which is in jest-setup.react.js here in devkit, even though
          // neither devkit nor enzyme has direct dependency on react)
          if (
            !result &&
            name.match(/^(react|react-dom|create-react-class|prop-types)(\/.*|)$/) &&
            getUu5g04Dir() != null
          ) {
            result = findNodeModule(name, Object.assign({}, options, { basedir: getUu5g04Dir() }));
          }
        }
      }
    }
  }

  return result;
}

// https://jestjs.io/docs/configuration#resolver-string
function findNodeModule(name, options) {
  try {
    return options.defaultResolver(name, {
      ...options,
      packageFilter: (pkg) => {
        let result = pkg;
        // NOTE We use "browser" field only for devkit-built libraries because 3rd-parties such as node-fetch
        // would break.
        if (pkg.spec && typeof pkg.browser === "string") {
          result = { ...pkg, main: pkg.browser };
        }
        return result;
      },
    });
  } catch (e) {
    // jest-resolve/build/resolver.js, findNodeModule()
    if (options.throwIfNotFound || name.startsWith("#")) {
      throw e;
    }
  }
  return null;
}

function initAliasesFileInAnotherProject(relatedProjectFolder) {
  let origCwd = process.cwd();
  process.chdir(path.join("..", relatedProjectFolder));
  try {
    let ProjectConfig = require("uu_appg01_devkit-common/src/config/project-config.js");
    let devConfig = new ProjectConfig({ mode: "development", hot: false });
    require("../scripts/webpack/runner.js").mergeBuildConfig(devConfig);
    require("./webpack.config.js").writeAliases(
      devConfig.getAll(),
      path.join(paths.buildDir, "jest-webpack-aliases.json")
    );
  } finally {
    process.chdir(origCwd);
  }
}
