// this plugin replaces ES6-like "import ..." and "export ..." statements from comments in a built .js file
// because SystemJS@0.19.47 loader gets confused due to those when performing auto-detection of format of a loaded module
// (and as a result it tries to transpile the file in the browser which ends with JS error)

const { ReplaceSource } = require("webpack-sources");

// taken from https://github.com/systemjs/systemjs/blob/0.19.47/dist/system.src.js  :3532
const esmRegExp = /(^\s*|[}\);\n]\s*)(import\s*(['"]|(\*\s+as\s+)?[^"'\(\)\n;]+\s*from\s*['"]|\{)|export\s+\*\s+from\s+["']|export\s*(\{|default|function|class|var|const|let|async\s+function))/; // eslint-disable-line
const esmRegExpG = /(^\s*|[}\);\n]\s*)(import\s*(['"]|(\*\s+as\s+)?[^"'\(\)\n;]+\s*from\s*['"]|\{)|export\s+\*\s+from\s+["']|export\s*(\{|default|function|class|var|const|let|async\s+function))/g; // eslint-disable-line

class SystemjsEs6DetectionFixPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    compiler.hooks.compilation.tap("SystemjsEs6DetectionFixPlugin", (compilation) => {
      compilation.hooks.optimizeAssets.tap("SystemjsEs6DetectionFixPlugin", (assets) => {
        if (!assets || typeof assets !== "object") return;
        for (let name in assets) {
          if (name.match(/(^|[/\\])(lib|assets)[/\\]/) || !name.match(/\.js$/)) continue;

          let source = assets[name];
          if (!source || typeof source.source !== "function") continue;
          let content = source.source();
          let origContent = content;
          let strContent = "";
          if (typeof content === "string") strContent = content;
          else if (content instanceof Buffer) strContent = content.toString("utf-8");
          else if (content && content.toString) strContent = content.toString();
          if (strContent.match(esmRegExp)) {
            let newSource = new ReplaceSource(source);
            // try to match it only in comments
            // NOTE The regexp is not entirely correct, e.g. it mismatches "comments" in regexps
            // ('var regexp= /\/* import /;' - it'll think that a comment started on this line)
            let modContent = strContent.replace(
              // /* comment */      | "string"                | 'string'                | // comment
              /\/\*((?:\s|\S)*?)\*\/|"(?:[^"\\]|\\(?:\s|\S))*"|'(?:[^'\\]|\\(?:\s|\S))*'|\/\/(.*)/g,
              (m, comment, commentSingle, index) => {
                if (comment) {
                  let result =
                    "/*" +
                    comment.replace(esmRegExpG, (m) => m.replace(/import|export/, (m1) => m1.toUpperCase())) +
                    "*/";
                  if (result !== m) newSource.replace(index, index + m.length - 1, result);
                  return result;
                }
                if (commentSingle) {
                  let result =
                    "//" +
                    commentSingle.replace(esmRegExpG, (m) => m.replace(/import|export/, (m1) => m1.toUpperCase()));
                  if (result !== m) newSource.replace(index, index + m.length - 1, result);
                  return result;
                }
                return m;
              }
            );
            if (!modContent.match(esmRegExp)) {
              // using modified content seems fine (the 'import' / 'export' was indeed inside of a comment)
              if (modContent !== origContent) {
                assets[name] = newSource;
              }
            } else {
              // there's something weird - looks like the SystemJS regexp matched outside a comment => keep the asset as-is
            }
          }
        }
      });
    });
  }
}

module.exports = SystemjsEs6DetectionFixPlugin;
