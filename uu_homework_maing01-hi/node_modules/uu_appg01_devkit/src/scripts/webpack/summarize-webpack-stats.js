const path = require("path");
const chalk = require("chalk");

function formatMessage(errorOrMessage) {
  let message = (errorOrMessage.message || errorOrMessage.stack || errorOrMessage || "") + "";
  let lines = message.trim().split(/\r?\n/);
  let srcFileContentLines = lines.filter((line) => line.replace(/\033\[[0-9;]+m/g, "").match(/^\s+\d+\s+\|\s+/)); // lines showing source code such as '  29 |   about: { component: <About />adsf },'
  let removeStack = srcFileContentLines.length > 0 || (lines[0] && lines[0].includes("Circular dependency detected"));
  lines = lines.filter(
    (line) =>
      !line.match(
        /(?:^|[a-zA-Z]*Error: )Module build failed\s+\(from.*(babel-loader|less-loader|mini-css-extract-plugin)/
      )
  ); // strip non-relevant info

  let originSrcFile = errorOrMessage.moduleIdentifier ? errorOrMessage.moduleIdentifier.split("!").pop() : null;
  let cwd = process.cwd();
  if (lines[0]) {
    // replace:
    //   SyntaxError: C:\temp\webpack5\demo-app-webpack5\uu_testapp_maing01-hi\src\core\spa-authenticated.js: Unexpected token, expected "," (28:30)   =>
    //   SyntaxError: C:\temp\webpack5\demo-app-webpack5\uu_testapp_maing01-hi\src\core\spa-authenticated.js:28:31 Unexpected token, expected ","
    let fileStartIndex = lines[0].indexOf(cwd);
    let rowColMatch;
    if (fileStartIndex !== -1 && (rowColMatch = lines[0].match(/\((\d+):(\d+)\)\s*$/))) {
      let index = (lines[0].slice(fileStartIndex + cwd.length).match(/: /) || {}).index;
      if (index != null) {
        index += fileStartIndex + cwd.length;
        // use 1-based index for column because that's what IDEs use to open file at such position
        let row = rowColMatch[1];
        let col = Number(rowColMatch[2]) + 1;
        lines[0] = lines[0].slice(0, index) + ":" + row + ":" + col + lines[0].slice(index + 1, -rowColMatch[0].length);
      }
    }

    // replace:
    //   ModuleNotFoundError: Module not found: Error: Can't resolve 'uu_plus4u5g01ss' in 'C:\temp\webpack5\demo-app-webpack5\uu_testapp_maing01-hi\src\core'
    //   ModuleNotFoundError: Module not found: Error: Can't resolve 'uu_plus4u5g01ss' in 'C:\temp\webpack5\demo-app-webpack5\uu_testapp_maing01-hi\src\core\spa-authenticated.js'
    let moduleNotFoundMatch = lines[0].match(/(?:^|[a-zA-Z]*Error: )(Module not found:.*) in '([^']+)'(.*)$/);
    if (moduleNotFoundMatch && originSrcFile) {
      lines[0] = moduleNotFoundMatch[1] + " from " + originSrcFile + moduleNotFoundMatch[3];
      removeStack = true;
    }
  }

  if (removeStack) {
    lines = lines.filter((line) => !line.match(/^\s+@ |^\s+at\s+/));
  }

  // add info about where the error/warning originates from if there's no such file mentioned (with absolute path)
  if (originSrcFile && !lines.some((line) => line.indexOf(originSrcFile) !== -1)) {
    lines.unshift(`From: ${originSrcFile}`);
  }

  // colorize all absolute file paths (within current directory)
  lines = lines.map((line) => {
    let result = line;
    let idx = line.indexOf(cwd);
    if (idx !== -1) {
      let length = cwd.length + line.substr(idx + cwd.length).search(/[^a-zA-Z0-9_\-/\\.@]|$/);
      result = line.substr(0, idx) + chalk.blue(line.substr(idx, length)) + line.substr(idx + length);
    }
    return result;
  });

  return lines.join("\n").trim();
}

function summarizeWebpackStats(statsObj, time = null, colorSuccess = true) {
  const stats = statsObj.toJson({}, true);
  let timeStr = typeof time === "number" ? " [" + time + "ms]" : "";

  // NOTE Errors / warnings are modified in-place so that the same ones are sent to browser console.
  if (stats.errors.length) {
    // show errors (show only 1st one because others are usually due to the initial one)
    stats.errors = stats.errors.map((error) => formatMessage(error));
    console.error(stats.errors[0]); // stats.errors.join("\n\n"));
    console.error(chalk.red("Failed to compile.") + timeStr);
  } else if (stats.warnings.length) {
    stats.warnings = stats.warnings.map((message) => formatMessage(message));
    console.warn(stats.warnings.join("\n\n"));
    console.warn(chalk.yellow("Compiled with warnings.") + timeStr);
  } else {
    let colorFn = colorSuccess ? chalk.green.bind(chalk) : (txt) => txt;
    console.log(colorFn("Compiled successfully!") + timeStr);
  }

  return stats;
}

module.exports = summarizeWebpackStats;
