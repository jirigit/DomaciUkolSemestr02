"use strict";

const { Config } = require("uu_appg01_core-utils");
const AuthenticationService = require("../authentication-service.js");

let NOTIFICATION_DELAY = Config.getNumber("uu_app_oidc_unmet_access_policy_notification_delay") || 3000;

let errorReasonMap = null;
let notificationTimer = null;

/**
 * Interceptor for processing access policy verification errors, and firing
 * corresponding event on AuthenticationService to allow user re-authentication.
 */
class AccessPolicyVerificationHandler {

  constructor(next, options = null) {
    this._next = next;
    this._options = options || {};
  }

  async invoke(request, options = null) {
    try {
      return await this._next.invoke(request, options);
    } catch (e) {
      if (e.code === "uu-app-oidc/verifyAccessPolicy/untrustedSession" && e.paramMap) {
        this._recordError(e);
      }
      throw e;
    }
  }

  _recordError(e) {
    let errorReasonMap = this._getErrorReasonMap();
    let {maxAuthenticationAge, supportedAcrValues, deniedAuthenticationRealms} = e.paramMap;
    if (maxAuthenticationAge != null) {
      if (errorReasonMap.maxAuthenticationAge == null || errorReasonMap.maxAuthenticationAge > maxAuthenticationAge) {
        errorReasonMap.maxAuthenticationAge = maxAuthenticationAge;
      }
    }
    if (supportedAcrValues != null) {
      if (errorReasonMap.supportedAcrValues == null) {
        errorReasonMap.supportedAcrValues = supportedAcrValues;
      } else {
        errorReasonMap.supportedAcrValues = errorReasonMap.supportedAcrValues.filter(acr => supportedAcrValues.includes(acr));
      }
    }
    if (deniedAuthenticationRealms) {
      if (errorReasonMap.deniedAuthenticationRealms == null) {
        errorReasonMap.deniedAuthenticationRealms = deniedAuthenticationRealms;
      } else {
        deniedAuthenticationRealms.forEach((realm) => {
          if (!errorReasonMap.deniedAuthenticationRealms.includes(realm)) {
            errorReasonMap.deniedAuthenticationRealms.push(realm);
          }
        });
      }
    }
  }

  _getErrorReasonMap() {
    if (errorReasonMap) {
      return errorReasonMap;
    }
    errorReasonMap = {};
    notificationTimer = setTimeout(() => {
      AuthenticationService._triggerEvent("untrustedSession", {...errorReasonMap});
      errorReasonMap = null;
      notificationTimer = null;
    }, NOTIFICATION_DELAY);
    return errorReasonMap;
  }

}

module.exports = AccessPolicyVerificationHandler;
