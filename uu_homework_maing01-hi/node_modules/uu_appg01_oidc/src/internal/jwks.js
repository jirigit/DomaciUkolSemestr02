"use strict";

const {BaseError, LruCache} = require("uu_appg01_core-utils");
const {AppClient} = require("uu_appg01_core-appclient");
const {InvalidCredentials} = require("uu_appg01_core-authentication");
const {PerflogHandler, RemoteErrorHandler, RetryHandler, TransformParametersHandler} = require("uu_appg01_core-appclient");

const APP_CLIENT_INTERCEPTORS = [PerflogHandler, RemoteErrorHandler, RetryHandler, TransformParametersHandler];
const APP_CLIENT_INTERCEPTORS_NO_PERFLOG = [RemoteErrorHandler, RetryHandler, TransformParametersHandler];
const APP_CLIENT_RETRY_POLICY = {maxAttempts: 3, maxTimeInterval: 30000, baseTimeInterval: 100, retryCondition: {httpMethods: ["GET", "POST"], httpStatusCodes: ["5xx"]}};

const JWKS_CACHE_SIZE = 16;
const DEFAULT_JWKS_CACHE_TTL = 60 * 60;
const JWKS_CACHE_STORAGE_KEY = "uu_app_oidc_cache_jwks";

const JWKS_CACHE = new LruCache({maxSize: JWKS_CACHE_SIZE, localStorageKey: JWKS_CACHE_STORAGE_KEY});

class Jwks {

  constructor(discovery, opts = {}) {
    if (!discovery) {
      throw new BaseError("Instance of discovery must be provided");
    }
    this._discovery = discovery;
    this._jwksCacheTtl = (opts.jwksCacheTtl ? Number(opts.jwksCacheTtl) : DEFAULT_JWKS_CACHE_TTL) * 1000;
    let perflogEnabled = (typeof opts.perflogEnabled === "boolean") ? opts.perflogEnabled : true;
    let interceptors = perflogEnabled ? APP_CLIENT_INTERCEPTORS : APP_CLIENT_INTERCEPTORS_NO_PERFLOG;
    this._client = new AppClient(Object.assign(opts, {interceptors, retryPolicy: APP_CLIENT_RETRY_POLICY}));
  }

  async getPublicKeyData(kid) {
    let jwks = await this.getPublicKeySet();
    let publicKeyData = jwks && jwks.keys.find(pk => pk.kid === kid);
    if (!publicKeyData) {
      jwks = await this.getPublicKeySet(true);
      publicKeyData = jwks && jwks.keys.find(pk => pk.kid === kid);
      if (!publicKeyData) {
        let issuer = (await this._discovery.getMetadata()).issuer
        throw new InvalidCredentials(`Unable to obtain public JWK key with jwk_id=${kid} from ${issuer}.`);
      }
    }
    return publicKeyData;
  }

  async getPublicKeySet(refresh = false) {
    let metadata = await this._discovery.getMetadata();
    let issuerUri = metadata.issuer;
    let jwks = JWKS_CACHE.get(issuerUri);
    if (!jwks || refresh) {
      jwks = (await this._client.get(metadata.jwks_uri)).data;
      JWKS_CACHE.set(issuerUri, jwks, this._jwksCacheTtl);
    }
    return jwks;
  }

}

module.exports = Jwks;
