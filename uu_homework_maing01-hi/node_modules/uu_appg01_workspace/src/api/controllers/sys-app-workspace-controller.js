"use strict";

const SysAppWorkspaceAbl = require("../../abl/sys-app-workspace-abl.js");

class SysAppWorkspaceController {
  create(ucEnv) {
    return SysAppWorkspaceAbl.create({
      dtoIn: ucEnv.getDtoIn(),
      uuIdentity: ucEnv.getSession().getIdentity().getUuIdentity(),
    });
  }

  assign(ucEnv) {
    return SysAppWorkspaceAbl.assign({
      dtoIn: ucEnv.getDtoIn(),
      uuIdentity: ucEnv.getSession().getIdentity().getUuIdentity(),
    });
  }

  unassign(ucEnv) {
    return SysAppWorkspaceAbl.unassign({
      dtoIn: ucEnv.getDtoIn(),
      uuIdentity: ucEnv.getSession().getIdentity().getUuIdentity(),
    });
  }

  reassign(ucEnv) {
    return SysAppWorkspaceAbl.reassign({
      dtoIn: ucEnv.getDtoIn(),
      uuIdentity: ucEnv.getSession().getIdentity().getUuIdentity(),
    });
  }

  get(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    return SysAppWorkspaceAbl.get(awid);
  }

  set(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const dtoIn = ucEnv.getDtoIn();
    const session = ucEnv.getSession();
    return SysAppWorkspaceAbl.set(awid, dtoIn, session.getIdentity().getUuIdentity());
  }

  close(ucEnv) {
    const dtoIn = ucEnv.getDtoIn();
    return SysAppWorkspaceAbl.close(dtoIn);
  }

  suspend(ucEnv) {
    const dtoIn = ucEnv.getDtoIn();
    return SysAppWorkspaceAbl.suspend(dtoIn);
  }

  resume(ucEnv) {
    const dtoIn = ucEnv.getDtoIn();
    return SysAppWorkspaceAbl.resume(dtoIn);
  }

  setActiveSysState(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const dtoIn = ucEnv.getDtoIn();
    const session = ucEnv.getSession();
    return SysAppWorkspaceAbl.setActiveSysState(awid, dtoIn, session.getIdentity().getUuIdentity());
  }

  setRestrictedSysState(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const dtoIn = ucEnv.getDtoIn();
    const session = ucEnv.getSession();
    return SysAppWorkspaceAbl.setRestrictedSysState(awid, dtoIn, session.getIdentity().getUuIdentity());
  }

  setReadOnlySysState(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const dtoIn = ucEnv.getDtoIn();
    const session = ucEnv.getSession();
    return SysAppWorkspaceAbl.setReadOnlySysState(awid, dtoIn, session.getIdentity().getUuIdentity());
  }

  getLicenseOwner(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    return SysAppWorkspaceAbl.getLicenseOwner(awid);
  }

  setAuthorizationStrategy(ucEnv) {
    const uri = ucEnv.uri;
    const dtoIn = ucEnv.getDtoIn();
    const session = ucEnv.getSession();
    return SysAppWorkspaceAbl.setAuthorizationStrategy(uri, dtoIn, session);
  }

  connectArtifact(ucEnv) {
    const uri = ucEnv.uri;
    const dtoIn = ucEnv.getDtoIn();
    const session = ucEnv.getSession();
    return SysAppWorkspaceAbl.connectArtifact(uri, dtoIn, session);
  }

  delete(ucEnv) {
    const uri = ucEnv.uri;
    const dtoIn = ucEnv.getDtoIn();
    return SysAppWorkspaceAbl.delete(uri, dtoIn);
  }

  list(ucEnv) {
    const dtoIn = ucEnv.getDtoIn();
    return SysAppWorkspaceAbl.list(dtoIn);
  }

  async getUuAppMetamodel(ucEnv) {
    const identity = ucEnv.getSession().getIdentity();
    const dtoOut = await SysAppWorkspaceAbl.getUuAppMetamodel(identity);
    ucEnv.setBinaryDtoOut(dtoOut, ucEnv.parameters.contentDisposition);
  }
}

module.exports = new SysAppWorkspaceController();
