export = Plus4U5Elements;
declare namespace Plus4U5Elements {
    function ArtifactButton(props: any): any;
    namespace ArtifactButton {
        function getColorStyles(colorScheme: any): any;
    }
    interface ArtifactLink$Props {
        typeIcon?: string;
        typeName?: any;
        stateIcon?: string;
        stateName?: any;
        href?: any;
        target?: any;
        onClick?: any;
        ellipsis?: boolean;
        suffix?: string;
        shortcut?: boolean;
        contextMenuList?: ((...args: any)=>any) | any;
        uuIdentity?: string;
    }
    function ArtifactLink(props: ArtifactLink$Props): any;
    interface Error$lsi {
    }
    interface Error$Props {
        title?: any;
        subtitle?: any;
        error?: any;
        lsi?: Error$lsi;
        flsBaseUri?: string;
    }
    function Error(props: Error$Props): any;
    interface IdentificationBlock$info {
        help?: any;
        context?: any;
        flsBaseUri?: string;
        slsBaseUri?: string;
    }
    interface IdentificationBlock$Props {
        info?: any | IdentificationBlock$info;
        identificationType?: "basic" | "none";
    }
    function IdentificationBlock(props: IdentificationBlock$Props): any;
    interface IdentificationIcon$localNavigation {
    }
    interface IdentificationIcon$Props {
        lsi?: any;
        localNavigation?: IdentificationIcon$localNavigation;
        showLocalNavigationSettings?: boolean;
    }
    function IdentificationIcon(props: IdentificationIcon$Props): any;
    namespace IdentificationIcon {
        function View(props: any): any;
    }
    interface IdentificationModal$info {
        help?: any;
        context?: any;
        flsBaseUri?: string;
        slsBaseUri?: string;
    }
    interface IdentificationModal$Props {
        info?: any | IdentificationModal$info;
        identificationType?: "basic" | "none";
    }
    function IdentificationModal(props: IdentificationModal$Props): any;
    interface LocalNavigation$lsi {
    }
    interface LocalNavigation$Props {
        showLocalNavigationSettings?: boolean;
        collapsed?: boolean;
        onClosePopover?(...args: any): any;
        lsi?: LocalNavigation$lsi;
    }
    function LocalNavigation(props: LocalNavigation$Props): any;
    interface Navigator$Props {
        tabList: any[];
        borderRadius?: string;
        showHelper?: boolean;
        isOriginalNavigator?: boolean;
        headerActionList?: any[];
    }
    function Navigator(props: Navigator$Props): any;
    namespace Navigator {
        interface Home$Props {
            isOriginalNavigator?: boolean;
        }
        function Home(props: Home$Props): any;
        interface Profile$Props {
            showHelper?: boolean;
            isOriginalNavigator?: boolean;
        }
        function Profile(props: Profile$Props): any;
        interface Browse$Props {
            isOriginalNavigator?: boolean;
        }
        function Browse(props: Browse$Props): any;
        interface Favorites$Props {
            isOriginalNavigator?: boolean;
        }
        function Favorites(props: Favorites$Props): any;
    }
    function NavigatorComponentItem(props: any): any;
    interface Onboarding$Props {
        itemList?: any | any[];
    }
    function Onboarding(props: Onboarding$Props): any;
    function PersonItem(props: any): any;
    function PersonPhoto(props: any): any;
    interface StateBadge$Props {
        icon: string;
    }
    function StateBadge(props: StateBadge$Props): any;
    function SysInfo(props: any): any;
    interface Unauthenticated$lsi {
    }
    interface Unauthenticated$Props {
        title?: any;
        subtitle?: any;
        lsi?: Unauthenticated$lsi;
    }
    function Unauthenticated(props: Unauthenticated$Props): any;
    interface Unauthorized$lsi {
    }
    interface Unauthorized$Props {
        title?: any;
        subtitle?: any;
        lsi?: Unauthorized$lsi;
        flsBaseUri?: string;
    }
    function Unauthorized(props: Unauthorized$Props): any;
    interface UnexpectedError$lsi {
    }
    interface UnexpectedError$Props {
        error?: any;
        lsi?: UnexpectedError$lsi;
    }
    function UnexpectedError(props: UnexpectedError$Props): any;
    function usePersonPhoto(uuIdentity: any, refreshKey: any): any;
    function withErrorBoundary(Component: any): any;
    namespace Widget {
        function LegacyCommandLine(): any;
        function NavigatorOnboarding1(): any;
    }
    const _Tools: {
        resolveColor(colorOrGdsColor: any, invertColor?: boolean): any;
        isColorScheme(color: any): any;
        openLink(uri: any, targetOrEvent: any): any;
        getInfo(info: any, isContext: any): any;
    };
    function _useEllipsis(children: any, ellipsis: any): any;
}